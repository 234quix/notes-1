<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Other on Chris Albon</title>
    <link>https://chrisalbon.com/tags/other/</link>
    <description>Recent content in Other on Chris Albon</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Dec 2017 11:53:49 -0700</lastBuildDate>
    
	<atom:link href="https://chrisalbon.com/tags/other/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Generate Tweets Using Markov Chains</title>
      <link>https://chrisalbon.com/python/generate_tweets_using_markov_chain/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/generate_tweets_using_markov_chain/</guid>
      <description>Preliminaries import markovify Load Corpus The corpus I am using is just one I found online. The corpus you choose is central to generating realistic text.
# Get raw text as string with open(&amp;#34;brown.txt&amp;#34;) as f: text = f.read() Build Markov Chain # Build the model. text_model = markovify.Text(text) Generate One Tweet # Print three randomly-generated sentences of no more than 140 characters for i in range(3): print(text_model.make_short_sentence(140)) Within a month, calls were still productive and most devotees of baseball attended the dozens of them.</description>
    </item>
    
    <item>
      <title>Geolocate A City Or Country</title>
      <link>https://chrisalbon.com/python/geolocate_a_city_or_country/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/geolocate_a_city_or_country/</guid>
      <description>This tutorial creates a function that attempts to take a city and country and return its latitude and longitude. But when the city is unavailable (which is often be the case), the returns the latitude and longitude of the center of the country.
Preliminaries from geopy.geocoders import Nominatim geolocator = Nominatim() import numpy as np Create Geolocation Function def geolocate(city=None, country=None): &amp;#39;&amp;#39;&amp;#39; Inputs city and country, or just country. Returns the lat/long coordinates of either the city if possible, if not, then returns lat/long of the center of the country.</description>
    </item>
    
    <item>
      <title>Mine Twitter&#39;s Stream For Hashtags Or Words</title>
      <link>https://chrisalbon.com/python/mine_a_twitter_hashtags_and_words/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/mine_a_twitter_hashtags_and_words/</guid>
      <description>This is a script which monitor&amp;rsquo;s Twitter for tweets containing certain hashtags, words, or phrases. When one of those appears, it saves that tweet, and the user&amp;rsquo;s information to a csv file. A similar version of this script is available on GitHub here. The main difference between the code presented here and the repo is that here I am added extensive comments in the code explaining what is happening. Also, the code below runs as a Jupyter notebook.</description>
    </item>
    
    <item>
      <title>Monitor A Website For Changes With Python</title>
      <link>https://chrisalbon.com/python/monitor_a_website/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/monitor_a_website/</guid>
      <description>In this snippet, we create a continous loop that, at set times, scrapes a website, checks to see if it contains some text and if so, emails me. Specifically I used this script to find when Venture Beat had published an article about my company.
It should be noted that there are more efficient ways of setting scripts to run at certain times, notable cron. However, this is a quick and dirty solution.</description>
    </item>
    
    <item>
      <title>Simple Clustering With SciPy</title>
      <link>https://chrisalbon.com/python/scipy_simple_clustering/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/scipy_simple_clustering/</guid>
      <description>Import modules import numpy as np %matplotlib inline import matplotlib.pyplot as plt from scipy.cluster import vq Create coordinates for battles for each year of the war # create 100 coordinate pairs (i.e. two values), then add 5 to all of them year_1 = np.random.randn(100, 2) + 5 # create 30 coordinatee pairs (i.e. two values), then subtract 5 to all of them year_2 = np.random.randn(30, 2) - 5 # create 50 coordinatee pairs (i.</description>
    </item>
    
    <item>
      <title>What Is The Probability An Economy Class Seat Is An Aisle Seat?</title>
      <link>https://chrisalbon.com/python/aisle_seat_probabilities/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/aisle_seat_probabilities/</guid>
      <description>There are two types of people in the world, aisle seaters and window seaters. I am an aisle seater, nothing is worse than limited bathroom access on a long flight. The first thing I do when I get my ticket is check to see if I have a window seat. If not, I immediately head over to the airline counter and try to get one.
Last flight, on Turkish Airlines, I ran into a curious situation.</description>
    </item>
    
  </channel>
</rss>