<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Basics on Chris Albon</title>
    <link>https://chrisalbon.com/tags/basics/</link>
    <description>Recent content in Basics on Chris Albon</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Dec 2017 11:53:49 -0700</lastBuildDate>
    
	<atom:link href="https://chrisalbon.com/tags/basics/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Add Padding Around String</title>
      <link>https://chrisalbon.com/python/add_padding_around_string/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/add_padding_around_string/</guid>
      <description> Create Some Text text = &amp;#39;Chapter 1&amp;#39; Add Padding Around Text # Add Spaces Of Padding To The Left format(text, &amp;#39;&amp;gt;20&amp;#39;) &#39; Chapter 1&#39;  # Add Spaces Of Padding To The Right format(text, &amp;#39;&amp;lt;20&amp;#39;) &#39;Chapter 1 &#39;  # Add Spaces Of Padding On Each Side format(text, &amp;#39;^20&amp;#39;) &#39; Chapter 1 &#39;  # Add * Of Padding On Each Side format(text, &amp;#39;*^20&amp;#39;) &#39;*****Chapter 1******&#39;  </description>
    </item>
    
    <item>
      <title>Adding Dropout</title>
      <link>https://chrisalbon.com/deep_learning_keras/adding_dropout/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/deep_learning_keras/adding_dropout/</guid>
      <description>Preliminaries # Load libraries import numpy as np from keras.datasets import imdb from keras.preprocessing.text import Tokenizer from keras import models from keras import layers # Set random seed np.random.seed(0) Using TensorFlow backend.  Load IMDB Movie Review Data # Set the number of features we want number_of_features = 1000 # Load data and target vector from movie review data (train_data, train_target), (test_data, test_target) = imdb.load_data(num_words=number_of_features) # Convert movie review data to a one-hot encoded feature matrix tokenizer = Tokenizer(num_words=number_of_features) train_features = tokenizer.</description>
    </item>
    
    <item>
      <title>All Combinations For A List Of Objects</title>
      <link>https://chrisalbon.com/python/all_combinations_of_a_list_of_objects/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/all_combinations_of_a_list_of_objects/</guid>
      <description>Preliminary # Import combinations with replacements from itertools from itertools import combinations_with_replacement Create a list of objects # Create a list of objects to combine list_of_objects = [&amp;#39;warplanes&amp;#39;, &amp;#39;armor&amp;#39;, &amp;#39;infantry&amp;#39;] Find all combinations (with replacement) for the list # Create an empty list object to hold the results of the loop combinations = [] # Create a loop for every item in the length of list_of_objects, that, for i in list(range(len(list_of_objects))): # Finds every combination (with replacement) for each object in the list combinations.</description>
    </item>
    
    <item>
      <title>Apply Operations Over Items In A List</title>
      <link>https://chrisalbon.com/python/apply_operations_over_items_in_lists/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/apply_operations_over_items_in_lists/</guid>
      <description>Method 1: map() # Create a list of casualties from battles battleDeaths = [482, 93, 392, 920, 813, 199, 374, 237, 244]# Create a function that updates all battle deaths by adding 100 def updated(x): return x + 100# Create a list that applies updated() to all elements of battleDeaths list(map(updated, battleDeaths)) [582, 193, 492, 1020, 913, 299, 474, 337, 344]  Method 2: for x in y # Create a list of deaths casualties = [482, 93, 392, 920, 813, 199, 374, 237, 244]# Create a variable where we will put the updated casualty numbers casualtiesUpdated = []# Create a function that for each item in casualties, adds 10 for x in casualties: casualtiesUpdated.</description>
    </item>
    
    <item>
      <title>Applying Functions To List Items</title>
      <link>https://chrisalbon.com/python/applying_functions_to_list_items/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/applying_functions_to_list_items/</guid>
      <description>Create a list of regiment names regimentNames = [&amp;#39;Night Riflemen&amp;#39;, &amp;#39;Jungle Scouts&amp;#39;, &amp;#39;The Dragoons&amp;#39;, &amp;#39;Midnight Revengence&amp;#39;, &amp;#39;Wily Warriors&amp;#39;] Using A For Loop Create a for loop goes through the list and capitalizes each # create a variable for the for loop results regimentNamesCapitalized_f = [] # for every item in regimentNames for i in regimentNames: # capitalize the item and add it to regimentNamesCapitalized_f regimentNamesCapitalized_f.append(i.upper()) # View the outcome regimentNamesCapitalized_f [&#39;NIGHT RIFLEMEN&#39;, &#39;JUNGLE SCOUTS&#39;, &#39;THE DRAGOONS&#39;, &#39;MIDNIGHT REVENGENCE&#39;, &#39;WILY WARRIORS&#39;]  Using Map() Create a lambda function that capitalizes x capitalizer = lambda x: x.</description>
    </item>
    
    <item>
      <title>Arithmetic Basics</title>
      <link>https://chrisalbon.com/python/arithmetic_basics/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/arithmetic_basics/</guid>
      <description>Create some simulated variables x = 6 y = 9 x plus y x + y 15  x minus y x - y -3  x times y x * y 54  the remainder of x divided by y x % y 6  x divided by y x / y 0.6666666666666666  x divided by y (floor) (i.e. the quotient) x // y 0  x raised to the y power x ** y 10077696  x plus y, then divide by x (x + y) / x 2.</description>
    </item>
    
    <item>
      <title>Assignment Operators</title>
      <link>https://chrisalbon.com/python/assignment_operators/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/assignment_operators/</guid>
      <description>Create some variables a = 2 b = 1 c = 0 d = 3 Assigns values from right side to left side c = a + b c 3  Add right to the left and assign the result to left (c = a + c) c += a c 5  Subtract right from the left and assign the result to left (c = a - c) c -= a c 3  Multiply right with the left and assign the result to left (c = a * c) c *= a c 6  Divide left with the right and assign the result to left (c = c / a) c /= a c 3.</description>
    </item>
    
    <item>
      <title>Big-O Notation</title>
      <link>https://chrisalbon.com/algorithms_data_structures/big-o_notation/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/algorithms_data_structures/big-o_notation/</guid>
      <description>Big-O notation is used to classify the worst-case &amp;ldquo;speed&amp;rdquo; of an algorithm by looking at the order of magnitude of execution time.
From best to worst, some common Big-O&amp;rsquo;s are:
 O(1) O(log n) O(n) O(n log n) O(n2) O(n3) O(2n)  Below are some examples of a few of these.
Create Data # Create a list 100 elements long n = list(range(100)) O(1) - Constant Time-Complexity The length of n has no bearing on the number of steps required to complete the function.</description>
    </item>
    
    <item>
      <title>Binary Search</title>
      <link>https://chrisalbon.com/algorithms_data_structures/binary_search/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/algorithms_data_structures/binary_search/</guid>
      <description>Create Sorted List sorted_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 16, 18, 20] print(sorted_list) [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 16, 18, 20]  Create Binary Search Algorithm def binary_search(sorted_list, target): &amp;#39;&amp;#39;&amp;#39;This function inputs a sorted list and a target value to find and returns ....&amp;#39;&amp;#39;&amp;#39; # Create variables for the index of the first and last elements start = 0 end = len(sorted_list) - 1 while end &amp;gt;= start: # Create a variable for the index of the middle term middle = start + (end - start) // 2 # // is integer division in Python 3.</description>
    </item>
    
    <item>
      <title>Break A Sequence Into Groups</title>
      <link>https://chrisalbon.com/scala/break_a_sequence_into_groups/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/scala/break_a_sequence_into_groups/</guid>
      <description> Create An Array Sequence // Create an array that contains arrays with first and last names val ages = List(42,25,28,38,58,63,23,458,2569,584,25,25,878) Group Array By Anonymous Function // If an element is even, return True, if not, return False val isEven = ages.groupBy(_ % 2 == 0) View Groups // View group that is evens evensOdds(true) List(42, 28, 38, 58, 458, 584, 878)  // View group that is odds evensOdds(false) List(25, 63, 23, 2569, 25, 25)  </description>
    </item>
    
    <item>
      <title>Breaking Up String Variables</title>
      <link>https://chrisalbon.com/python/breaking_up_string_variables/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/breaking_up_string_variables/</guid>
      <description> Basic name assignment variableName = &amp;#39;This is a string.&amp;#39; List assignment One, Two, Three = [1, 2, 3] Break up a string into variables firstLetter, secondLetter, thirdLetter, fourthLetter = &amp;#39;Bark&amp;#39;firstLetter &#39;B&#39;  secondLetter &#39;a&#39;  thirdLetter &#39;r&#39;  fourthLetter &#39;k&#39;  Breaking up a number into separate variables firstNumber, secondNumber, thirdNumber, fourthNumber = &amp;#39;9485&amp;#39;firstNumber &#39;9&#39;  secondNumber &#39;4&#39;  thirdNumber &#39;8&#39;  fourthNumber &#39;5&#39;  Assign the first letter of &amp;lsquo;spam&amp;rsquo; into varible a, assign all the remaining letters to variable b a, *b = &amp;#39;spam&amp;#39; a &#39;s&#39;  b [&#39;p&#39;, &#39;a&#39;, &#39;m&#39;]  </description>
    </item>
    
    <item>
      <title>Brute Force D20 Roll Simulator</title>
      <link>https://chrisalbon.com/python/brute_force_d20_simulator/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/brute_force_d20_simulator/</guid>
      <description>This snippet is a completely inefficient simulator of a 20 sided dice. To create a &amp;ldquo;successful roll&amp;rdquo; the snippet has to generate dozens of random numbers.
Import random module import random Create a variable with a TRUE value rolling = True Create a while loop that rolls until the first digit is 2 or less and the second digit is 10 or less # while rolling is true while rolling: # create x, a random number between 0 and 99 x = random.</description>
    </item>
    
    <item>
      <title>Bubble Sort</title>
      <link>https://chrisalbon.com/algorithms_data_structures/bubble_sort/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/algorithms_data_structures/bubble_sort/</guid>
      <description> Create A Sequence unsorted_list = [8,5,3,6,2,1,9,4,7] unsorted_list [8, 5, 3, 6, 2, 1, 9, 4, 7]  Create A Bubble Sort Function # Define a function that takes an unsorted sequence def bubble_sort(unsorted_list): # Create a new list containing the values from the inputed list sequence = unsorted_list[:] # For each value of the sequence (epochs), for i, _ in enumerate(sequence): # For each value of the sequence, for i, _ in enumerate(sequence): # Try try: # If a value is greater than the value that follows it if sequence[i] &amp;gt; sequence[i+1]: # Swap the values in the sequence sequence[i], sequence[i+1] = sequence[i+1], sequence[i] # If you raise an index error, you are at the end of the sequence, except IndexError: # So ignore the error and continue with iteration continue # Print the sequence afer each epoch print(sequence)# Run the function bubble_sort(unsorted_list) [5, 3, 6, 2, 1, 8, 4, 7, 9] [3, 5, 2, 1, 6, 4, 7, 8, 9] [3, 2, 1, 5, 4, 6, 7, 8, 9] [2, 1, 3, 4, 5, 6, 7, 8, 9] [1, 2, 3, 4, 5, 6, 7, 8, 9] [1, 2, 3, 4, 5, 6, 7, 8, 9] [1, 2, 3, 4, 5, 6, 7, 8, 9] [1, 2, 3, 4, 5, 6, 7, 8, 9] [1, 2, 3, 4, 5, 6, 7, 8, 9]  </description>
    </item>
    
    <item>
      <title>Cartesian Product</title>
      <link>https://chrisalbon.com/python/cartesian_product/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/cartesian_product/</guid>
      <description>Preliminaries # import pandas as pd import pandas as pd Create Data # Create two lists i = [1,2,3,4,5] j = [1,2,3,4,5] Calculate Cartesian Product (Method 1) # List every single x in i with every single y (i.e. Cartesian product) [(x, y) for x in i for y in j] [(1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5)]  Calculate Cartesian Product (Method 2) # An alternative way to do the cartesian product # import itertools import itertools # for two sets, find the the cartisan product for i in itertools.</description>
    </item>
    
    <item>
      <title>Chain Together Lists</title>
      <link>https://chrisalbon.com/python/chain_together_lists/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/chain_together_lists/</guid>
      <description> Preliminaries from itertools import chain Create Two Lists # Create a list of allies allies = [&amp;#39;Spain&amp;#39;, &amp;#39;Germany&amp;#39;, &amp;#39;Namibia&amp;#39;, &amp;#39;Austria&amp;#39;] # Create a list of enemies enemies = [&amp;#39;Mexico&amp;#39;, &amp;#39;United Kingdom&amp;#39;, &amp;#39;France&amp;#39;] Iterate Over Both Lists As A Single Sequence # For each country in allies and enemies for country in chain(allies, enemies): # print the country print(country) Spain Germany Namibia Austria Mexico United Kingdom France  </description>
    </item>
    
    <item>
      <title>Change Data Type</title>
      <link>https://chrisalbon.com/scala/change_data_type/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/scala/change_data_type/</guid>
      <description>Change To Integer // Convert a float to an integer 32.34.toInt 32  // Convert a string to an integer &amp;#34;23394&amp;#34;.toInt 23394  Change To Double // Convert a string to a double &amp;#34;23394&amp;#34;.toDouble 23394.0  Change To Float // Convert a string to float &amp;#34;23394&amp;#34;.toFloat 23394.0  // Convert an integer to float 3923.toFloat 3923.0  Change To Long // Convert a string to long &amp;#34;23394&amp;#34;.toLong 23394  Change To Short // Convert a string to short &amp;#34;23394&amp;#34;.</description>
    </item>
    
    <item>
      <title>Chunk Sequence In Equal Sized Groups</title>
      <link>https://chrisalbon.com/scala/chuck_sequence_into_equal_sized_groups/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/scala/chuck_sequence_into_equal_sized_groups/</guid>
      <description>Create An Array Sequence // Create an array that contains arrays with first and last names val ages = List(42,25,28,38,58,63,23,458,2569,584,25,25,878) Chunk Array Into Groups Of Two Elements // Slide over sequence, create a list of two elements, then take two steps ages.sliding(2,2).toArray Array(List(42, 25), List(28, 38), List(58, 63), List(23, 458), List(2569, 584), List(25, 25), List(878))  Chunk Array Into Groups Of Two Elements, With Overlap // Slide over sequence, create a list of two elements, then take one step ages.</description>
    </item>
    
    <item>
      <title>Compare Two Dictionaries</title>
      <link>https://chrisalbon.com/python/compare_two_dictionaries/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/compare_two_dictionaries/</guid>
      <description>Make Two Dictionaries importers = {&amp;#39;El Salvador&amp;#39; : 1234, &amp;#39;Nicaragua&amp;#39; : 152, &amp;#39;Spain&amp;#39; : 252 } exporters = {&amp;#39;Spain&amp;#39; : 252, &amp;#39;Germany&amp;#39; : 251, &amp;#39;Italy&amp;#39; : 1563 } Find Duplicate Keys # Find the intersection of importers and exporters importers.keys() &amp;amp; exporters.keys() {&#39;Spain&#39;}  Find Difference In Keys # Find the difference between importers and exporters importers.keys() - exporters.keys() {&#39;El Salvador&#39;, &#39;Nicaragua&#39;}  Find Key, Values Pairs In Common # Find countries where the amount of exports matches the amount of imports importers.</description>
    </item>
    
    <item>
      <title>Compare Two Floats</title>
      <link>https://chrisalbon.com/scala/compare_two_floats/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/scala/compare_two_floats/</guid>
      <description>Create Two Float Values // Create a value val price_old = 2.343232 // Create a value that is very slight different val price_new = 2.343231 Create A Function That Compares Two Floats // Define a function called ~= that contains three arguments: two numbers and a precision level, def ~=(x: Double, y: Double, precision: Double) = { // If the absolute difference is less than the precision level, return true, otherwise return false  if ((x - y).</description>
    </item>
    
    <item>
      <title>Concurrent Processing</title>
      <link>https://chrisalbon.com/python/concurrent_processing/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/concurrent_processing/</guid>
      <description> Preliminaries from concurrent import futures Create Data data = range(100) Create Function # Create some function that takes a value def some_function(value): # And outputs it raised to its own power return value**value Run The Function On The Data Concurrently # With a pool of workers with futures.ProcessPoolExecutor() as executor: # Map the function to the data result = executor.map(some_function, data) View Results # List the first 5 outputs list(result)[0:5] [1, 1, 4, 27, 256]  </description>
    </item>
    
    <item>
      <title>Construct A Dictionary From Multiple Lists</title>
      <link>https://chrisalbon.com/python/construct_a_dictionary_from_multiple_lists/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/construct_a_dictionary_from_multiple_lists/</guid>
      <description> Create Two Lists # Create a list of theofficer&amp;#39;s name officer_names = [&amp;#39;Sodoni Dogla&amp;#39;, &amp;#39;Chris Jefferson&amp;#39;, &amp;#39;Jessica Billars&amp;#39;, &amp;#39;Michael Mulligan&amp;#39;, &amp;#39;Steven Johnson&amp;#39;] # Create a list of the officer&amp;#39;s army officer_armies = [&amp;#39;Purple Army&amp;#39;, &amp;#39;Orange Army&amp;#39;, &amp;#39;Green Army&amp;#39;, &amp;#39;Red Army&amp;#39;, &amp;#39;Blue Army&amp;#39;] Construct A Dictionary From The Two Lists # Create a dictionary that is the zip of the two lists dict(zip(officer_names, officer_armies)) {&#39;Chris Jefferson&#39;: &#39;Orange Army&#39;, &#39;Jessica Billars&#39;: &#39;Green Army&#39;, &#39;Michael Mulligan&#39;: &#39;Red Army&#39;, &#39;Sodoni Dogla&#39;: &#39;Purple Army&#39;, &#39;Steven Johnson&#39;: &#39;Blue Army&#39;}  </description>
    </item>
    
    <item>
      <title>Continue And Break Loops</title>
      <link>https://chrisalbon.com/python/continue_and_break_loops/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/continue_and_break_loops/</guid>
      <description>Import the random module import random Create a while loop # set running to true running = True# while running is true while running: # Create a random integer between 0 and 5 s = random.randint(0,5) # If the integer is less than 3 if s &amp;lt; 3: # Print this print(&amp;#39;It is too small, starting over.&amp;#39;) # Reset the next interation of the loop # (i.e skip everything below and restart from the top) continue # If the integer is 4 if s == 4: running = False # Print this print(&amp;#39;It is 4!</description>
    </item>
    
    <item>
      <title>Convert HTML Characters To Strings</title>
      <link>https://chrisalbon.com/python/convert_html_symbols_to_strings/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/convert_html_symbols_to_strings/</guid>
      <description>## Preliminariesimport html## Create Texttext = &amp;#39;This item costs ¥400 or £4.&amp;#39;## Convert To Stringhtml.unescape(text) &#39;This item costs ¥400 or £4.&#39;  ## Convert To HTML Entitieshtml.escape(text) &#39;This item costs &amp;amp;amp;#165;400 or &amp;amp;amp;#163;4.&#39;  </description>
    </item>
    
    <item>
      <title>Convolutional Neural Network</title>
      <link>https://chrisalbon.com/deep_learning_keras/convolutional_neural_network/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/deep_learning_keras/convolutional_neural_network/</guid>
      <description>Preliminaries import numpy as np from keras.datasets import mnist from keras.models import Sequential from keras.layers import Dense, Dropout, Flatten from keras.layers.convolutional import Conv2D, MaxPooling2D from keras.utils import np_utils from keras import backend as K # Set that the color channel value will be first K.set_image_data_format(&amp;#39;channels_first&amp;#39;) # Set seed np.random.seed(0) Using TensorFlow backend.  Load MNIST Image Data # Set image information channels = 1 height = 28 width = 28 # Load data and target from MNIST data (train_data, train_target), (test_data, test_target) = mnist.</description>
    </item>
    
    <item>
      <title>Create A New File Then Write To It</title>
      <link>https://chrisalbon.com/python/create_a_new_file_and_the_write_to_it/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/create_a_new_file_and_the_write_to_it/</guid>
      <description>Create A New File And Write To It # Create a file if it doesn&amp;#39;t already exist with open(&amp;#39;file.txt&amp;#39;, &amp;#39;xt&amp;#39;) as f: # Write to the file f.write(&amp;#39;This file now exsits!&amp;#39;) # Close the connection to the file f.close() Open The File And Read It # Open the file with open(&amp;#39;file.txt&amp;#39;, &amp;#39;rt&amp;#39;) as f: # Read the data in the file data = f.read() # Close the connection to the file f.</description>
    </item>
    
    <item>
      <title>Create A Range</title>
      <link>https://chrisalbon.com/scala/create_a_range/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/scala/create_a_range/</guid>
      <description> Create A Range 1 to 10 // Create a range between 1 and 10 1 to 10 Range(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)  Create A Range In An Array // Create an array between 1 and 10 and put in an array (1 to 10).toArray Array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)  Use A Range In A For Loop // For each 1 in 1,2,3,4,5 for (i &amp;lt;- 1 to 10) // Print i  println(&amp;#34;index: &amp;#34;+ i) index: 1 index: 2 index: 3 index: 4 index: 5 index: 6 index: 7 index: 8 index: 9 index: 10  </description>
    </item>
    
    <item>
      <title>Create A Temporary File</title>
      <link>https://chrisalbon.com/python/create_a_temporary_file/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/create_a_temporary_file/</guid>
      <description>Preliminaries from tempfile import NamedTemporaryFile Create A Temporary File f = NamedTemporaryFile(&amp;#39;w+t&amp;#39;) Write To The Temp File # Write to the file, the output is the number of characters f.write(&amp;#39;Nobody lived on Deadweather but us and the pirates. It wasn’t hard to understand why.&amp;#39;) 85  View The Tmp File&amp;rsquo;s Name f.name &#39;/var/folders/0b/pj3wsd750fjf8xzfb0n127w80000gn/T/tmphv1dkovx&#39;  Read The File # Go to the top of the file f.seek(0) # Read the file f.</description>
    </item>
    
    <item>
      <title>Create Counts Of Items</title>
      <link>https://chrisalbon.com/python/creating_counts_of_items/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/creating_counts_of_items/</guid>
      <description>Preliminaries from collections import Counter Create A Counter # Create a counter of the fruits eaten today fruit_eaten = Counter([&amp;#39;Apple&amp;#39;, &amp;#39;Apple&amp;#39;, &amp;#39;Apple&amp;#39;, &amp;#39;Banana&amp;#39;, &amp;#39;Pear&amp;#39;, &amp;#39;Pineapple&amp;#39;]) # View counter fruit_eaten Counter({&#39;Apple&#39;: 3, &#39;Banana&#39;: 1, &#39;Pear&#39;: 1, &#39;Pineapple&#39;: 1})  Update The Count For An Element # Update the count for &amp;#39;Pineapple&amp;#39; (because you just ate an pineapple) fruit_eaten.update([&amp;#39;Pineapple&amp;#39;]) # View the counter fruit_eaten Counter({&#39;Apple&#39;: 3, &#39;Banana&#39;: 1, &#39;Pear&#39;: 1, &#39;Pineapple&#39;: 2})  View The Items With The Highest Counts # View the items with the top 3 counts fruit_eaten.</description>
    </item>
    
    <item>
      <title>Data Structure Basics</title>
      <link>https://chrisalbon.com/python/data_structure_basics/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/data_structure_basics/</guid>
      <description>Lists &amp;ldquo;A list is a data structure that holds an ordered collection of items i.e. you can store a sequence of items in a list.&amp;rdquo; - A Byte Of Python
Lists are mutable.
# Create a list of countries, then print the results allies = [&amp;#39;USA&amp;#39;,&amp;#39;UK&amp;#39;,&amp;#39;France&amp;#39;,&amp;#39;New Zealand&amp;#39;, &amp;#39;Australia&amp;#39;,&amp;#39;Canada&amp;#39;,&amp;#39;Poland&amp;#39;]; allies [&#39;USA&#39;, &#39;UK&#39;, &#39;France&#39;, &#39;New Zealand&#39;, &#39;Australia&#39;, &#39;Canada&#39;, &#39;Poland&#39;]  # Print the length of the list len(allies) 7  # Add an item to the list, then print the results allies.</description>
    </item>
    
    <item>
      <title>Date And Time Basics</title>
      <link>https://chrisalbon.com/python/date_and_time_basics/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/date_and_time_basics/</guid>
      <description># Import modules from datetime import datetime from datetime import timedelta# Create a variable with the current time now = datetime.now() now datetime.datetime(2014, 5, 11, 20, 5, 11, 688051)  # The current year now.year 2014  # The current month now.month 5  # The current day now.day 11  # The current hour now.hour 20  # The current minute now.minute 5  # The difference between two dates delta = datetime(2011, 1, 7) - datetime(2011, 1, 6) delta datetime.</description>
    </item>
    
    <item>
      <title>Dictionary Basics</title>
      <link>https://chrisalbon.com/python/dictionary_basics/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/dictionary_basics/</guid>
      <description>Basics  Not sequences, but mappings. That is, stored by key, not relative position. Dictionaries are mutable.  Build a dictionary via brackets unef_org = {&amp;#39;name&amp;#39; : &amp;#39;UNEF&amp;#39;, &amp;#39;staff&amp;#39; : 32, &amp;#39;url&amp;#39; : &amp;#39;http://unef.org&amp;#39;} View the variable unef_org {&#39;name&#39;: &#39;UNEF&#39;, &#39;staff&#39;: 32, &#39;url&#39;: &#39;http://unef.org&#39;}  Build a dict via keys who_org = {} who_org[&amp;#39;name&amp;#39;] = &amp;#39;WHO&amp;#39; who_org[&amp;#39;staff&amp;#39;] = &amp;#39;10&amp;#39; who_org[&amp;#39;url&amp;#39;] = &amp;#39;http://who.org&amp;#39; View the variable who_org {&#39;name&#39;: &#39;WHO&#39;, &#39;staff&#39;: &#39;10&#39;, &#39;url&#39;: &#39;http://who.</description>
    </item>
    
    <item>
      <title>Display Scientific Notation As Floats</title>
      <link>https://chrisalbon.com/python/display_scientific_notation_as_floats/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/display_scientific_notation_as_floats/</guid>
      <description>Create Values # Create a numbers in scientific notation value_scientific_notation = 6.32000000e-03 # Create a vector of numbers in scientific notation vector_scientific_notation = [6.32000000e-03, 1.80000000e+01, 2.31000000e+00, 0.00000000e+00, 5.38000000e-01, 6.57500000e+00, 6.52000000e+01, 4.09000000e+00, 1.00000000e+00, 2.96000000e+02, 1.53000000e+01, 3.96900000e+02, 4.98000000e+00] Display Values As Floats # Display value as a float &amp;#39;{:f}&amp;#39;.format(value_scientific_notation) &#39;0.006320&#39;  # Display vector values as floats [&amp;#39;{:f}&amp;#39;.format(x) for x in vector_scientific_notation] [&#39;0.006320&#39;, &#39;18.000000&#39;, &#39;2.310000&#39;, &#39;0.000000&#39;, &#39;0.538000&#39;, &#39;6.575000&#39;, &#39;65.200000&#39;, &#39;4.090000&#39;, &#39;1.000000&#39;, &#39;296.</description>
    </item>
    
    <item>
      <title>Enumerate A List</title>
      <link>https://chrisalbon.com/python/enumerate_a_list/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/enumerate_a_list/</guid>
      <description># Create a list of strings data = [&amp;#39;One&amp;#39;,&amp;#39;Two&amp;#39;,&amp;#39;Three&amp;#39;,&amp;#39;Four&amp;#39;,&amp;#39;Five&amp;#39;]# For each item in the enumerated variable, data for item in enumerate(data): # Print the whole enumerated element print(item) # Print only the value (not the index number) print(item[1]) (0, &#39;One&#39;) One (1, &#39;Two&#39;) Two (2, &#39;Three&#39;) Three (3, &#39;Four&#39;) Four (4, &#39;Five&#39;) Five  </description>
    </item>
    
    <item>
      <title>Exiting A Loop</title>
      <link>https://chrisalbon.com/python/exiting_a_loop/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/exiting_a_loop/</guid>
      <description>Create A List # Create a list: armies = [&amp;#39;Red Army&amp;#39;, &amp;#39;Blue Army&amp;#39;, &amp;#39;Green Army&amp;#39;] Breaking Out Of A For Loop for army in armies: print(army) if army == &amp;#39;Blue Army&amp;#39;: print(&amp;#39;Blue Army Found! Stopping.&amp;#39;) break Red Army Blue Army Blue Army Found! Stopping.  Notice that the loop stopped after the conditional if statement was satisfied.
Exiting If Loop Completed A loop will exit when completed, but using an else statement we can add an action at the conclusion of the loop if it hasn&amp;rsquo;t been exited earlier.</description>
    </item>
    
    <item>
      <title>Extract Substrings Using Regex</title>
      <link>https://chrisalbon.com/scala/extract_substring_using_regex/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/scala/extract_substring_using_regex/</guid>
      <description> Create String // Create a string value val text: String = &amp;#34;27 aircraft&amp;#34; Create Regex Pattern // Create a regex with two pattern matches (one number and one word) val pattern = &amp;#34;([0-9]+) ([A-Za-z]+)&amp;#34;.r Extract Substrings That Match Regex // Apply the regex pattern such that each of the two pattern matches is assigned to a seperate value val pattern(vehicle_number, vehicle_type) = text View Output // View the value vehicle_number 27  // View the value vehicle_type aircraft  </description>
    </item>
    
    <item>
      <title>Feedforward Neural Network For Binary Classification</title>
      <link>https://chrisalbon.com/deep_learning_keras/feedforward_neural_network_for_binary_classification/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/deep_learning_keras/feedforward_neural_network_for_binary_classification/</guid>
      <description>Preliminaries # Load libraries import numpy as np from keras.datasets import imdb from keras.preprocessing.text import Tokenizer from keras import models from keras import layers # Set random seed np.random.seed(0) Using TensorFlow backend.  Load Movie Review Data # Set the number of features we want number_of_features = 1000 # Load data and target vector from movie review data (train_data, train_target), (test_data, test_target) = imdb.load_data(num_words=number_of_features) # Convert movie review data to one-hot encoded feature matrix tokenizer = Tokenizer(num_words=number_of_features) train_features = tokenizer.</description>
    </item>
    
    <item>
      <title>Feedforward Neural Network For Multiclass Classification</title>
      <link>https://chrisalbon.com/deep_learning_keras/feedforward_neural_network_for_multiclass_classification/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/deep_learning_keras/feedforward_neural_network_for_multiclass_classification/</guid>
      <description>Preliminaries # Load libraries import numpy as np from keras.datasets import reuters from keras.utils.np_utils import to_categorical from keras.preprocessing.text import Tokenizer from keras import models from keras import layers # Set random seed np.random.seed(0) Using TensorFlow backend.  Load Movie Review Data # Set the number of features we want number_of_features = 5000 # Load feature and target data (train_data, train_target_vector), (test_data, test_target_vector) = reuters.load_data(num_words=number_of_features) # Convert feature data to a one-hot encoded feature matrix tokenizer = Tokenizer(num_words=number_of_features) train_features = tokenizer.</description>
    </item>
    
    <item>
      <title>Feedforward Neural Networks For Regression</title>
      <link>https://chrisalbon.com/deep_learning_keras/feedforward_neural_network_for_regression/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/deep_learning_keras/feedforward_neural_network_for_regression/</guid>
      <description>Preliminaries # Load libraries import numpy as np from keras.preprocessing.text import Tokenizer from keras import models from keras import layers from sklearn.datasets import make_regression from sklearn.model_selection import train_test_split from sklearn import preprocessing # Set random seed np.random.seed(0) Using TensorFlow backend.  Generate Training Data # Generate features matrix and target vector features, target = make_regression(n_samples = 10000, n_features = 3, n_informative = 3, n_targets = 1, noise = 0.0, random_state = 0) # Divide our data into training and test sets train_features, test_features, train_target, test_target = train_test_split(features, target, test_size=0.</description>
    </item>
    
    <item>
      <title>Filter A Sequence</title>
      <link>https://chrisalbon.com/scala/filter_a_sequence/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/scala/filter_a_sequence/</guid>
      <description> Create An Array Sequence // Create an array that contains arrays with first and last names val ages = Array(42,25,28,38,58,63,23,458,2569,584,25,25,878) Elements Less Than 100 ages.filter(_ &amp;lt; 100) Array(42, 25, 28, 38, 58, 63, 23, 25, 25)  Elements Greater Than 100 ages.filter(_ &amp;gt;= 100) Array(458, 2569, 584, 878)  Elements That Are Even ages.filter(_ % 2 == 0) Array(42, 28, 38, 58, 458, 584, 878)  </description>
    </item>
    
    <item>
      <title>Find Largest Key Or Value In A Map</title>
      <link>https://chrisalbon.com/scala/find_largest_key_or_value_in_a_map/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/scala/find_largest_key_or_value_in_a_map/</guid>
      <description> Create A Map // Create an immutable map with three key value pairs val numbers = Map(1 -&amp;gt; 100, 2 -&amp;gt; 200, 3 -&amp;gt; 300) Find Largest Key // Find largest key numbers.max (3,300)  Find Largest Value // Find the largest value numbers.valuesIterator.max 300  </description>
    </item>
    
    <item>
      <title>Find The Max Value In A Dictionary</title>
      <link>https://chrisalbon.com/python/find_the_max_value_in_a_dictionary/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/find_the_max_value_in_a_dictionary/</guid>
      <description> Create A Dictionary ages = {&amp;#39;John&amp;#39;: 21, &amp;#39;Mike&amp;#39;: 52, &amp;#39;Sarah&amp;#39;: 12, &amp;#39;Bob&amp;#39;: 43 } Find The Maximum Value Of The Values max(zip(ages.values(), ages.keys())) (52, &#39;Mike&#39;)  </description>
    </item>
    
    <item>
      <title>Flatten Sequence Of Sequences</title>
      <link>https://chrisalbon.com/scala/flatten_sequence_of_sequences/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/scala/flatten_sequence_of_sequences/</guid>
      <description> Create An Array Sequence // Create an array that contains arrays with first and last names val fullNames = Array( Array(&amp;#34;Jason&amp;#34;, &amp;#34;Miller&amp;#34;), Array(&amp;#34;Jason&amp;#34;, &amp;#34;Miller&amp;#34;), // Duplicate  Array(&amp;#34;Sally&amp;#34;, &amp;#34;Fields&amp;#34;), Array(&amp;#34;Betty&amp;#34;, &amp;#34;Johnson&amp;#34;) ) Flatten The Sequence // Flatten the sequence fullNames.flatten Array(Jason, Miller, Jason, Miller, Sally, Fields, Betty, Johnson)  Flatten The Sequence And Only Keep Unique Values // Flatten the sequence and remove any duplicates fullNames.flatten.distinct Array(Jason, Miller, Sally, Fields, Betty, Johnson)  </description>
    </item>
    
    <item>
      <title>For Loop</title>
      <link>https://chrisalbon.com/python/for_loops/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/for_loops/</guid>
      <description># One at a time, assign each value of the sequence to i and, for i in [432, 342, 928, 920]: # multiply i by 10 and store the product in a new variable, x create a new variable, x, x = i * 10 # print the value of x print(x) # after the entire sequence processes, else: # print this print(&amp;#39;All done!&amp;#39;) 4320 3420 9280 9200 All done!  </description>
    </item>
    
    <item>
      <title>For Loop A Map</title>
      <link>https://chrisalbon.com/scala/for_loop_a_map/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/scala/for_loop_a_map/</guid>
      <description> Create A Map val vehicles = Map(&amp;#34;vehicle_type&amp;#34; -&amp;gt; &amp;#34;Tank&amp;#34;, &amp;#34;number&amp;#34; -&amp;gt; 21) Loop With Value And Index // Create a value for the returned values, for each key and value in the map, val numberOfVehicles = for ((key, value) &amp;lt;- vehicles) yield { // Return the values  value }// View the returned values numberOfVehicles List(Tank, 21)  </description>
    </item>
    
    <item>
      <title>For Looping</title>
      <link>https://chrisalbon.com/scala/for_looping/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/scala/for_looping/</guid>
      <description>Create An Array val staffMembers = Array(&amp;#34;Jason Miller&amp;#34;, &amp;#34;Steve Miller&amp;#34;, &amp;#34;Sally Fields&amp;#34;) Loop Over Every Item In The Array // Create a value that is the output, then for each person in staff val staffFirstNames = for (person &amp;lt;- staffMembers) yield { // Upper case the name  val upperCaseFullNames = person.toUpperCase // Get the first name by splitting the full name by space and taking the first element  val firstName = upperCaseFullNames.</description>
    </item>
    
    <item>
      <title>Format Numbers As Currency</title>
      <link>https://chrisalbon.com/scala/format_numbers_as_currency/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/scala/format_numbers_as_currency/</guid>
      <description>Load The NumberFormat Currency Package // Create a value with the numberformat currency package val format_as_dollars = java.text.NumberFormat.getCurrencyInstance Format A Number As Dollars format_as_dollars.format(123.456789) $123.46  Change To A Local Currency Java&amp;rsquo;s locale uses ISO 3166-1 country codes.
// Load the java libraries import java.util.{Currency, Locale} // Create a value with the numberformat currency package val format_as_afghan = java.text.NumberFormat.getCurrencyInstance // Set the locale of Currency to Afganistan val af = Currency.</description>
    </item>
    
    <item>
      <title>Formatting Numbers</title>
      <link>https://chrisalbon.com/python/formatting_numbers/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/formatting_numbers/</guid>
      <description> Create A Long Number annual_revenue = 9282904.9282872782 Format Number # Format rounded to two decimal places format(annual_revenue, &amp;#39;0.2f&amp;#39;) &#39;9282904.93&#39;  # Format with commas and rounded to one decimal place format(annual_revenue, &amp;#39;0,.1f&amp;#39;) &#39;9,282,904.9&#39;  # Format as scientific notation format(annual_revenue, &amp;#39;e&amp;#39;) &#39;9.282905e+06&#39;  # Format as scientific notation rounded to two deciminals format(annual_revenue, &amp;#39;0.2E&amp;#39;) &#39;9.28E+06&#39;  </description>
    </item>
    
    <item>
      <title>Function Annotation Examples</title>
      <link>https://chrisalbon.com/python/function_annotation_examples/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/function_annotation_examples/</guid>
      <description> Create A Function With Annotations &amp;#39;&amp;#39;&amp;#39; Create a function. The argument &amp;#39;text&amp;#39; is the string to print with the default value &amp;#39;default string&amp;#39; and the argument The argument &amp;#39;n&amp;#39; is an integer of times to print with the default value of 1. The function should return a string. &amp;#39;&amp;#39;&amp;#39; def print_text(text:&amp;#39;string to print&amp;#39;=&amp;#39;default string&amp;#39;, n:&amp;#39;integer, times to print&amp;#39;=1) -&amp;gt; str: return text * n Run The Function # Run the function with arguments print_text(&amp;#39;string&amp;#39;, 4) &#39;stringstringstringstring&#39;  # Run the function with default arguments print_text() &#39;default string&#39;  </description>
    </item>
    
    <item>
      <title>Function Basics</title>
      <link>https://chrisalbon.com/python/function_basics/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/function_basics/</guid>
      <description>Create Function Called print_max def print_max(x, y): # if a is larger than b if x &amp;gt; y: # then print this print(x, &amp;#39;is maximum&amp;#39;) # if a is equal to b elif x == y: # print this print(x, &amp;#39;is equal to&amp;#39;, y) # otherwise else: # print this print(y, &amp;#39;is maximum&amp;#39;) Run Function With Two Arguments print_max(3,4) 4 is maximum  Note: By default, variables created within functions are local to the function.</description>
    </item>
    
    <item>
      <title>Functions Vs. Generators</title>
      <link>https://chrisalbon.com/python/functions_vs_generators/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/functions_vs_generators/</guid>
      <description>Create A Function # Create a function that def function(names): # For each name in a list of names for name in names: # Returns the name return name# Create a variable of that function students = function([&amp;#39;Abe&amp;#39;, &amp;#39;Bob&amp;#39;, &amp;#39;Christina&amp;#39;, &amp;#39;Derek&amp;#39;, &amp;#39;Eleanor&amp;#39;])# Run the function students &#39;Abe&#39;  Now we have a problem, we were only returned the name of the first student. Why? Because the function only ran the for name in names iteration once!</description>
    </item>
    
    <item>
      <title>Generating Random Numbers With NumPy</title>
      <link>https://chrisalbon.com/python/generating_random_numbers_with_numpy/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/generating_random_numbers_with_numpy/</guid>
      <description> Import Numpy import numpy as np Generate A Random Number From The Normal Distribution np.random.normal() 0.5661104974399703  Generate Four Random Numbers From The Normal Distribution np.random.normal(size=4) array([-1.03175853, 1.2867365 , -0.23560103, -1.05225393])  Generate Four Random Numbers From The Uniform Distribution np.random.uniform(size=4) array([ 0.00193123, 0.51932356, 0.87656884, 0.33684494])  Generate Four Random Integers Between 1 and 100 np.random.randint(low=1, high=100, size=4) array([96, 25, 94, 77])  </description>
    </item>
    
    <item>
      <title>Generator Expressions</title>
      <link>https://chrisalbon.com/python/generator_expressions/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/generator_expressions/</guid>
      <description># Create a list of students students = [&amp;#39;Abe&amp;#39;, &amp;#39;Bob&amp;#39;, &amp;#39;Christina&amp;#39;, &amp;#39;Derek&amp;#39;, &amp;#39;Eleanor&amp;#39;]# Create a generator expression that yields lower-case versions of the student&amp;#39;s names lowercase_names = (student.lower() for student in students)# View the generator object lowercase_names &amp;lt;generator object &amp;lt;genexpr&amp;gt; at 0x104837518&amp;gt;  # Get the next name lower-cased next(lowercase_names) &#39;abe&#39;  # Get the next name lower-cased next(lowercase_names) &#39;bob&#39;  # Get the remaining names lower-cased list(lowercase_names) [&#39;christina&#39;, &#39;derek&#39;, &#39;eleanor&#39;]  </description>
    </item>
    
    <item>
      <title>GitHub Cheatsheet</title>
      <link>https://chrisalbon.com/cloud_computing/github_cheatsheet/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/cloud_computing/github_cheatsheet/</guid>
      <description>Find The Version Of Git git --version
Create A New Git Repository  Go to the fold of the project.
 Run git init
  Clone An Existing Git Repository Cloning is the process of pulling down a copy of a repository stored on a server.
 Go to the parent folder of where you want to repository&amp;rsquo;s folder to be in.
 git clone [url to repository&#39;s git file] [name of folder / repository you want]</description>
    </item>
    
    <item>
      <title>Hard Wrapping Text</title>
      <link>https://chrisalbon.com/python/hard_wrapping_text/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/hard_wrapping_text/</guid>
      <description>Preliminaries import textwrap Create Text # Create some text excerpt = &amp;#39;Then there was the bad weather. It would come in one day when the fall was over. We would have to shut the windows in the night against the rain and the cold wind would strip the leaves from the trees in the Place Contrescarpe. The leaves lay sodden in the rain and the wind drove the rain against the big green autobus at the terminal and the Café des Amateurs was crowded and the windows misted over from the heat and the smoke inside.</description>
    </item>
    
    <item>
      <title>How To Use Default Dicts</title>
      <link>https://chrisalbon.com/python/how_to_use_default_dicts/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/how_to_use_default_dicts/</guid>
      <description> Preliminaries import collections Create A DefaultDict Default Dicts work just like regular dictionaries, except a key is called that doesn&amp;rsquo;t have a value, a default value (note: value, not key) is supplied.
# Create a defaultdict with the default value of 0 (int&amp;#39;s default value is 0) arrests = collections.defaultdict(int)  Add A New Key With A Value # Add an entry of a person with 10 arrests arrests[&amp;#39;Sarah Miller&amp;#39;] = 10# View dictionary arrests defaultdict(int, {&#39;Sarah Miller&#39;: 10})  Add A New Key Without A Value # Add an entry of a person with no value for arrests, # thus the default value is used arrests[&amp;#39;Bill James&amp;#39;] 0  # View dictionary arrests defaultdict(int, {&#39;Bill James&#39;: 0, &#39;Sarah Miller&#39;: 10})  </description>
    </item>
    
    <item>
      <title>If Else</title>
      <link>https://chrisalbon.com/scala/if_else/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/scala/if_else/</guid>
      <description> Create A Value // Create a value called x that is a short integer of 3 val x: Short = 3 Create A Conditional Expression // Create a value that is 1 if x is greater than 0, otherwise -1 val binary = if (x &amp;gt; 0) 1 else -1 // View that value binary 1  </description>
    </item>
    
    <item>
      <title>If Else On Any Or All Elements</title>
      <link>https://chrisalbon.com/python/ifelse_on_any_or_all_elements/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/ifelse_on_any_or_all_elements/</guid>
      <description>Preliminaries # import pandas as pd import pandas as pd Create a simulated dataset # Create an example dataframe data = {&amp;#39;score&amp;#39;: [1,2,3,4,5]} df = pd.DataFrame(data) df   score     0 1   1 2   2 3   3 4   4 5     Does any cell equal 3? # If any element in df.score equals three, if (df.</description>
    </item>
    
    <item>
      <title>Increment And Decrement Numbers</title>
      <link>https://chrisalbon.com/scala/increment_and_decrement_numbers/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/scala/increment_and_decrement_numbers/</guid>
      <description> Create Integer Variable // Create an integer variable of 10 var i:Int = 10 Increment And Decrement // Increment up 1 i += 1 // View variable i 11  // Decrement up 1 i -= 1 // View variable i 10  // Increment up x2 i *= 2 // View variable i 20  // Decrement down by half i /= 2 // View variable i 10  </description>
    </item>
    
    <item>
      <title>Indexing And Slicing NumPy Arrays</title>
      <link>https://chrisalbon.com/python/indexing_and_slicing_numpy_arrays/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/indexing_and_slicing_numpy_arrays/</guid>
      <description>Slicing Arrays Explanation Of Broadcasting Unlike many other data types, slicing an array into a new variable means that any chances to that new variable are broadcasted to the original variable. Put other way, a slice is a hotlink to the original array variable, not a seperate and independent copy of it.
# Import Modules import numpy as np# Create an array of battle casualties from the first to the last battle battleDeaths = np.</description>
    </item>
    
    <item>
      <title>Insert Variables Into Strings</title>
      <link>https://chrisalbon.com/scala/insert_variables_into_strings/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/scala/insert_variables_into_strings/</guid>
      <description> The proper term from this is string interpolation.
Create A Value // Create some values val number_of_soldiers: Short = 542 val casualties: Short = 32 Add The Value To A String print(f&amp;#34;Before the battle we had $number_of_soldierssoldiers. However, now we have ${number_of_soldiers - casualties}.&amp;#34;) Before the battle we had 542 soldiers. However, now we have 510.  </description>
    </item>
    
    <item>
      <title>Insertion Sort</title>
      <link>https://chrisalbon.com/algorithms_data_structures/insertion_sort/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/algorithms_data_structures/insertion_sort/</guid>
      <description> Create A Sequence alist = [8,5,3,6,2,1,9,4,7] alist [8, 5, 3, 6, 2, 1, 9, 4, 7]  Create A Selection Sort Algorithm # Define an function that takes a list def insertion_sort(alist): # Create a sequence from the argument list sequence = alist[:] # Get the length of the list n = len(sequence) # For 1 through the length for the sequence: for i in range(1, n): # save the value of the card value = sequence[i] # save the current position of the card position = i # while the card is not the first card and is smaller than the card to it&amp;#39;s left: while position &amp;gt; 0 and value &amp;lt; sequence[position - 1]: # the card overwrites the card to the left sequence[position] = sequence[position - 1] # And we move on to the next position position -= 1 # When we have found the right position (meaning the while loop is false) # put the card in its correct spot in the deck sequence[position] = value # View the deck so far print(sequence)# Run the sort insertion_sort(alist) [5, 8, 3, 6, 2, 1, 9, 4, 7] [3, 5, 8, 6, 2, 1, 9, 4, 7] [3, 5, 6, 8, 2, 1, 9, 4, 7] [2, 3, 5, 6, 8, 1, 9, 4, 7] [1, 2, 3, 5, 6, 8, 9, 4, 7] [1, 2, 3, 5, 6, 8, 9, 4, 7] [1, 2, 3, 4, 5, 6, 8, 9, 7] [1, 2, 3, 4, 5, 6, 7, 8, 9]  </description>
    </item>
    
    <item>
      <title>Iterate An Ifelse Over A List</title>
      <link>https://chrisalbon.com/python/iterate_ifelse_over_list/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/iterate_ifelse_over_list/</guid>
      <description> Create some data word_list = [&amp;#39;Egypt&amp;#39;, &amp;#39;Watching&amp;#39;, &amp;#39;Eleanor&amp;#39;] vowels = [&amp;#39;A&amp;#39;, &amp;#39;E&amp;#39;, &amp;#39;I&amp;#39;, &amp;#39;O&amp;#39;, &amp;#39;U&amp;#39;] Create a for loop # for each item in the word_list, for word in word_list: # if any word starts with e, where e is vowels, if any([word.startswith(e) for e in vowels]): # then print is valid, print(&amp;#39;Is valid&amp;#39;) # if not,  else: # print invalid print(&amp;#39;Invalid&amp;#39;) Is valid Invalid Is valid  </description>
    </item>
    
    <item>
      <title>Iterate Over A Map</title>
      <link>https://chrisalbon.com/scala/iterate_over_a_map/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/scala/iterate_over_a_map/</guid>
      <description>Create A Map // Create a map with three key value pairs val prices = Map(&amp;#34;Video Card&amp;#34; -&amp;gt; 200.00, &amp;#34;Motherboard&amp;#34; -&amp;gt; 400.00, &amp;#34;CPU&amp;#34; -&amp;gt; 100.00) Loop Over A Map // for each key and value in prices for ((k,v) &amp;lt;- prices) yield { // Return the value plus 100  v+100 } List(300.0, 500.0, 200.0)  Apply Function To Each Map Value // Increase each value in the map by 1000 prices.</description>
    </item>
    
    <item>
      <title>Iterate Over Multiple Lists Simultaneously</title>
      <link>https://chrisalbon.com/python/iterate_over_multiple_lists_simultaneously/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/iterate_over_multiple_lists_simultaneously/</guid>
      <description> Create Two Lists names = [&amp;#39;James&amp;#39;, &amp;#39;Bob&amp;#39;, &amp;#39;Sarah&amp;#39;, &amp;#39;Marco&amp;#39;, &amp;#39;Nancy&amp;#39;, &amp;#39;Sally&amp;#39;] ages = [42, 13, 14, 25, 63, 23] Iterate Over Both Lists At Once for name, age in zip(names, ages): print(name, age) James 42 Bob 13 Sarah 14 Marco 25 Nancy 63 Sally 23  </description>
    </item>
    
    <item>
      <title>Iterating Over Dictionary Keys</title>
      <link>https://chrisalbon.com/python/iterating_over_dictionary_keys/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/iterating_over_dictionary_keys/</guid>
      <description>Create A Dictionary Officers = {&amp;#39;Michael Mulligan&amp;#39;: &amp;#39;Red Army&amp;#39;, &amp;#39;Steven Johnson&amp;#39;: &amp;#39;Blue Army&amp;#39;, &amp;#39;Jessica Billars&amp;#39;: &amp;#39;Green Army&amp;#39;, &amp;#39;Sodoni Dogla&amp;#39;: &amp;#39;Purple Army&amp;#39;, &amp;#39;Chris Jefferson&amp;#39;: &amp;#39;Orange Army&amp;#39;}Officers {&#39;Chris Jefferson&#39;: &#39;Orange Army&#39;, &#39;Jessica Billars&#39;: &#39;Green Army&#39;, &#39;Michael Mulligan&#39;: &#39;Red Army&#39;, &#39;Sodoni Dogla&#39;: &#39;Purple Army&#39;, &#39;Steven Johnson&#39;: &#39;Blue Army&#39;}  Use Dictionary Comprehension # Display all dictionary entries where the key doesn&amp;#39;t start with &amp;#39;Chris&amp;#39; {keys : Officers[keys] for keys in Officers if not keys.</description>
    </item>
    
    <item>
      <title>LSTM Recurrent Neural Network</title>
      <link>https://chrisalbon.com/deep_learning_keras/lstm_recurrent_neural_network/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/deep_learning_keras/lstm_recurrent_neural_network/</guid>
      <description>Oftentimes we have text data that we want to classify. While it is possible to use a type of convolutional network, we are going to focus on a more popular option: the recurrent neural network. The key feature of recurrent neural networks is that information loops back in the network. This gives recurrent neural networks a type of memory it can use to better understand sequential data. A popular choice type of recurrent neural network is the long short-term memory (LSTM) network which allows for information to loop backwards in the network.</description>
    </item>
    
    <item>
      <title>Lambda Functions</title>
      <link>https://chrisalbon.com/python/lambda_functions/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/lambda_functions/</guid>
      <description> In Python, it is possible to string lambda functions together.
Create a series, called pipeline, that contains three mini functions pipeline = [lambda x: x **2 - 1 + 5, lambda x: x **20 - 2 + 3, lambda x: x **200 - 1 + 4] For each item in pipeline, run the lambda function with x = 3 for f in pipeline: print(f(3)) 13 3486784402 265613988875874769338781322035779626829233452653394495974574961739092490901302182994384699044004  </description>
    </item>
    
    <item>
      <title>Load A JSON File Into Pandas</title>
      <link>https://chrisalbon.com/python/load_json_file_into_pandas/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/load_json_file_into_pandas/</guid>
      <description> Preliminaries # Load library import pandas as pd Load JSON File # Create URL to JSON file (alternatively this can be a filepath) url = &amp;#39;https://raw.githubusercontent.com/chrisalbon/simulated_datasets/master/data.json&amp;#39; # Load the first sheet of the JSON file into a data frame df = pd.read_json(url, orient=&amp;#39;columns&amp;#39;) # View the first ten rows df.head(10)   .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; }    category datetime integer     0 0 2015-01-01 00:00:00 5   1 0 2015-01-01 00:00:01 5   10 0 2015-01-01 00:00:10 5   11 0 2015-01-01 00:00:11 5   12 0 2015-01-01 00:00:12 8   13 0 2015-01-01 00:00:13 9   14 0 2015-01-01 00:00:14 8   15 0 2015-01-01 00:00:15 8   16 0 2015-01-01 00:00:16 2   17 0 2015-01-01 00:00:17 1     </description>
    </item>
    
    <item>
      <title>Load An Excel File Into Pandas</title>
      <link>https://chrisalbon.com/python/load_excel_file_into_pandas/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/load_excel_file_into_pandas/</guid>
      <description> Preliminaries # Load library import pandas as pd Load Excel File # Create URL to Excel file (alternatively this can be a filepath) url = &amp;#39;https://raw.githubusercontent.com/chrisalbon/simulated_datasets/master/data.xlsx&amp;#39; # Load the first sheet of the Excel file into a data frame df = pd.read_excel(url, sheetname=0, header=1) # View the first ten rows df.head(10)   .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; }    5 2015-01-01 00:00:00 0     0 5 2015-01-01 00:00:01 0   1 9 2015-01-01 00:00:02 0   2 6 2015-01-01 00:00:03 0   3 6 2015-01-01 00:00:04 0   4 9 2015-01-01 00:00:05 0   5 7 2015-01-01 00:00:06 0   6 1 2015-01-01 00:00:07 0   7 6 2015-01-01 00:00:08 0   8 9 2015-01-01 00:00:09 0   9 5 2015-01-01 00:00:10 0     </description>
    </item>
    
    <item>
      <title>Logical Operations</title>
      <link>https://chrisalbon.com/python/logical_operations/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/logical_operations/</guid>
      <description>Create some simulated variables x = 6y = 9z = 12 x or y x or y 6  x and y x and y 9  not x not x False  x is equal to y x == y False  x is not equal to y x != y True  One is less than two 1 &amp;lt; 2 True  Two is less than or equal to four 2 &amp;lt;= 4 True  Three is equal to five 3 == 5 False  Three is not equal to four 3 !</description>
    </item>
    
    <item>
      <title>Loop A Collection</title>
      <link>https://chrisalbon.com/scala/loop_a_collection/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/scala/loop_a_collection/</guid>
      <description> Create A Vector Collection val vector = Vector(&amp;#34;Male&amp;#34;, 2, true) Loop Over The Collection // For each item in the collection, print the class type of the element vector.foreach((i: Any) =&amp;gt; println(i, i.getClass.getSimpleName)) (Male,String) (2,Integer) (true,Boolean)  // For each item in the collection vector.foreach { // If one of these, print &amp;#34;Man&amp;#34;  case &amp;#34;Male&amp;#34; | &amp;#34;M&amp;#34; | &amp;#34;Man&amp;#34; | &amp;#34;Gentleman&amp;#34; | &amp;#34;Boy&amp;#34; =&amp;gt; println(&amp;#34;Man&amp;#34;) // For everything else, print &amp;#34;Something Else&amp;#34;  case _ =&amp;gt; println(&amp;#34;Something Else&amp;#34;) } Man Something Else Something Else  </description>
    </item>
    
    <item>
      <title>Looping Over Two Lists</title>
      <link>https://chrisalbon.com/python/looping_over_two_lists/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/looping_over_two_lists/</guid>
      <description># Create a list of length 3: armies = [&amp;#39;Red Army&amp;#39;, &amp;#39;Blue Army&amp;#39;, &amp;#39;Green Army&amp;#39;] # Create a list of length 4: units = [&amp;#39;Red Infantry&amp;#39;, &amp;#39;Blue Armor&amp;#39;,&amp;#39;Green Artillery&amp;#39;,&amp;#39;Orange Aircraft&amp;#39;]# For each element in the first list, for army, unit in zip(armies, units): # Display the corresponding index element of the second list: print(army, &amp;#39;has the following options:&amp;#39;, unit) Red Army has the following options: Red Infantry Blue Army has the following options: Blue Armor Green Army has the following options: Green Artillery  Notice that the fourth item of the second list, orange aircraft, did not display.</description>
    </item>
    
    <item>
      <title>Make Numbers Pretty</title>
      <link>https://chrisalbon.com/scala/make_numbers_pretty/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/scala/make_numbers_pretty/</guid>
      <description>Load The NumberFormat Library // Make value that is assigned to an instance of numberformat val make_pretty = java.text.NumberFormat.getInstance Make An Integer Pretty // Format 10000 to 10,000 make_pretty.format(10000) Make A Float Pretty // Format to 10000.1928 to 10,000.193 make_pretty.format(10000.1928) 10,000.193  Load The NumberFortmat Library Set For European Numbers // Set the locale to germany val germany = new java.util.Locale(&amp;#34;de&amp;#34;, &amp;#34;DE&amp;#34;) // Make value that is assigned to an instance of numberformat set to germany val make_pretty_de = java.</description>
    </item>
    
    <item>
      <title>Mapping A Function To A Collection</title>
      <link>https://chrisalbon.com/scala/mapping_a_function_to_a_collection/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/scala/mapping_a_function_to_a_collection/</guid>
      <description>Preliminaries import scala.collection.mutable.ArrayBuffer Create Collection // Create an array of strings var birds = ArrayBuffer(&amp;#34;Hawk&amp;#34;, &amp;#34;Condor&amp;#34;, &amp;#34;Eagle&amp;#34;, &amp;#34;Pigeon&amp;#34;) Create Function // Create a function that returns the length of a string val getLength = (i: String) =&amp;gt; i.length Map The Function To The Collection // Map the function to the array birds.map(getLength) ArrayBuffer(4, 6, 5, 6)  Map An Anonymous Function To The Collection // Map the anonymous function to the collection birds.</description>
    </item>
    
    <item>
      <title>Match A Symbol</title>
      <link>https://chrisalbon.com/regex/match_a_symbol/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/regex/match_a_symbol/</guid>
      <description> Preliminaries # Load regex package import re Create some text # Create a variable containing a text string text = &amp;#39;$100&amp;#39; Apply regex # Find all instances of the exact match &amp;#39;$&amp;#39; re.findall(r&amp;#39;\$&amp;#39;, text) [&#39;$&#39;]  </description>
    </item>
    
    <item>
      <title>Match A Unicode Character</title>
      <link>https://chrisalbon.com/regex/match_a_unicode_character/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/regex/match_a_unicode_character/</guid>
      <description> Preliminaries # Load regex package import re Create some text # Create a variable containing a text string text = &amp;#39;Microsoft™.&amp;#39; Apply regex # Find any unicode character for a trademark re.findall(r&amp;#39;\u2122&amp;#39;, text) [&#39;™&#39;]  </description>
    </item>
    
    <item>
      <title>Match A Word</title>
      <link>https://chrisalbon.com/regex/match_a_word/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/regex/match_a_word/</guid>
      <description> Preliminaries # Load regex package import re Create some text # Create a variable containing a text string text = &amp;#39;The quick brown fox jumped over the lazy brown bear.&amp;#39; Apply regex # Find any word of three letters re.findall(r&amp;#39;\b...\b&amp;#39;, text) [&#39;The&#39;, &#39;fox&#39;, &#39;the&#39;]  </description>
    </item>
    
    <item>
      <title>Match Any Character</title>
      <link>https://chrisalbon.com/regex/match_any_character/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/regex/match_any_character/</guid>
      <description> Preliminaries # Load regex package import re Create some text # Create a variable containing a text string text = &amp;#39;The quick brown fox jumped over the lazy brown bear.&amp;#39; Apply regex # Find anything with a &amp;#39;T&amp;#39; and then the next two characters re.findall(r&amp;#39;T..&amp;#39;, text) [&#39;The&#39;]  </description>
    </item>
    
    <item>
      <title>Match Any Of A List Of Characters</title>
      <link>https://chrisalbon.com/regex/match_any_of_a_list_of_symbols/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/regex/match_any_of_a_list_of_symbols/</guid>
      <description> Preliminaries # Load regex package import re Create some text # Create a variable containing a text string text = &amp;#39;The quick brown fox jumped over the lazy brown bear.&amp;#39; Apply regex # Find all instances of any vowel re.findall(r&amp;#39;[aeiou]&amp;#39;, text) [&#39;e&#39;, &#39;u&#39;, &#39;i&#39;, &#39;o&#39;, &#39;o&#39;, &#39;u&#39;, &#39;e&#39;, &#39;o&#39;, &#39;e&#39;, &#39;e&#39;, &#39;a&#39;, &#39;o&#39;, &#39;e&#39;, &#39;a&#39;]  </description>
    </item>
    
    <item>
      <title>Match Any Of A Series Of Options</title>
      <link>https://chrisalbon.com/regex/match_any_of_series_of_characters/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/regex/match_any_of_series_of_characters/</guid>
      <description> Preliminaries # Load regex package import re Create some text # Create a variable containing a text string text = &amp;#39;The quick brown fox jumped over the lazy brown bear.&amp;#39; Apply regex # Find any of fox, snake, or bear re.findall(r&amp;#39;fox|snake|bear&amp;#39;, text) [&#39;fox&#39;, &#39;bear&#39;]  </description>
    </item>
    
    <item>
      <title>Match Any Of A Series Of Words</title>
      <link>https://chrisalbon.com/regex/match_any_of_series_of_words/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/regex/match_any_of_series_of_words/</guid>
      <description> Preliminaries # Load regex package import re Create some text # Create a variable containing a text string text = &amp;#39;The quick brown fox jumped over the lazy brown bear.&amp;#39; Apply regex # Find any of fox, snake, or bear re.findall(r&amp;#39;\b(fox|snake|bear)\b&amp;#39;, text) [&#39;fox&#39;, &#39;bear&#39;]  </description>
    </item>
    
    <item>
      <title>Match Dates</title>
      <link>https://chrisalbon.com/regex/match_dates/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/regex/match_dates/</guid>
      <description> Preliminaries # Load regex package import re Create some text # Create a variable containing a text string text = &amp;#39;My birthday is 09/15/1983. My brother\&amp;#39;s birthday is 01/01/01. My other two brothers have birthdays of 9/3/2001 and 09/1/83.&amp;#39; Apply regex # Find any text that fits the regex re.findall(r&amp;#39;\b[0-3]?[0-9]/[0-3]?[0-9]/(?:[0-9]{2})?[0-9]{2}\b&amp;#39;, text) [&#39;09/15/1983&#39;, &#39;01/01/01&#39;, &#39;9/3/2001&#39;, &#39;09/1/83&#39;]  </description>
    </item>
    
    <item>
      <title>Match Email Addresses</title>
      <link>https://chrisalbon.com/regex/match_email_addresses/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/regex/match_email_addresses/</guid>
      <description>Preliminaries # Load regex package import re Create some text # Create a variable containing a text string text = &amp;#39;My email is chris@hotmail.com, thanks! No, I am at bob@data.ninja.&amp;#39; Apply regex # Find all email addresses re.findall(r&amp;#39;[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9]+&amp;#39;, text) # Explanation: # This regex has three parts # [a-zA-Z0-9_.+-]+ Matches a word (the username) of any length # @[a-zA-Z0-9-]+ Matches a word (the domain name) of any length # \.</description>
    </item>
    
    <item>
      <title>Match Exact Text</title>
      <link>https://chrisalbon.com/regex/match_exact_text/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/regex/match_exact_text/</guid>
      <description> Preliminaries # Load regex package import re Create some text # Create a variable containing a text string text = &amp;#39;The quick brown fox jumped over the lazy brown bear.&amp;#39; Apply regex # Find all instances of the exact match &amp;#39;The&amp;#39; re.findall(r&amp;#39;The&amp;#39;, text) [&#39;The&#39;]  </description>
    </item>
    
    <item>
      <title>Match Integers Of Any Length</title>
      <link>https://chrisalbon.com/regex/match_integers_of_any_length/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/regex/match_integers_of_any_length/</guid>
      <description>Preliminaries # Load regex package import re Create some text # Create a variable containing a text string text = &amp;#39;21 scouts and 3 tanks fought against 4,003 protestors.&amp;#39; Apply regex # Find any character block that is a integer of any length re.findall(r&amp;#39;[1-9](?:\d{0,2})(?:,\d{3})*(?:\.\d*[1-9])?|0?\.\d*[1-9]|0&amp;#39;, text) [&#39;21&#39;, &#39;3&#39;, &#39;4,003&#39;]  Explanation from Justin Morgan
[1-9](?:\d{0,2}) #A sequence of 1-3 numerals not starting with 0 (?:,\d{3})* #Any number of three-digit groups, each preceded by a comma (?</description>
    </item>
    
    <item>
      <title>Match Text Between HTML Tags</title>
      <link>https://chrisalbon.com/regex/match_text_between_html_tags/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/regex/match_text_between_html_tags/</guid>
      <description> Preliminaries # Load regex package import re Create some text # Create a variable containing a text string text = &amp;#39;&amp;lt;p&amp;gt;The quick brown fox.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;The lazy brown bear.&amp;lt;/p&amp;gt;&amp;#39; Apply regex # Find any text between &amp;#39;&amp;lt;p&amp;gt;&amp;#39; and &amp;#39;&amp;lt;/p&amp;gt;&amp;#39; re.findall(r&amp;#39;&amp;lt;p&amp;gt;(.*?)&amp;lt;/p&amp;gt;&amp;#39;, text) [&#39;The quick brown fox.&#39;, &#39;The lazy brown bear.&#39;]  </description>
    </item>
    
    <item>
      <title>Match Times</title>
      <link>https://chrisalbon.com/regex/match_times/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/regex/match_times/</guid>
      <description> Preliminaries # Load regex package import re Create some text # Create a variable containing a text string text = &amp;#39;Chris: 12:34am. Steve: 16:30&amp;#39; Apply regex # Find any text that fits the regex re.findall(r&amp;#39;([0-1]\d:[0-5]\d)\s*(?:AM|PM)?&amp;#39;, text) [&#39;12:34&#39;, &#39;16:30&#39;]  </description>
    </item>
    
    <item>
      <title>Match URLs</title>
      <link>https://chrisalbon.com/regex/match_urls/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/regex/match_urls/</guid>
      <description> Preliminaries # Load regex package import re Create some text # Create a variable containing a text string text = &amp;#39;My blog is http://www.chrisalbon.com and not http://chrisalbon.com&amp;#39; Apply regex # Find any ISBN-10 or ISBN-13 number re.findall(r&amp;#39;(http|ftp|https):\/\/([\w\-_]+(?:(?:\.[\w\-_]+)+))([\w\-\.,@?^=%&amp;amp;:/~\+#]*[\w\-\@?^=%&amp;amp;/~\+#])?&amp;#39;, text) [(&#39;http&#39;, &#39;www.chrisalbon.com&#39;, &#39;&#39;), (&#39;http&#39;, &#39;chrisalbon.com&#39;, &#39;&#39;)]  </description>
    </item>
    
    <item>
      <title>Match US Phone Numbers</title>
      <link>https://chrisalbon.com/regex/match_us_phone_numbers/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/regex/match_us_phone_numbers/</guid>
      <description> Preliminaries # Load regex package import re Create some text # Create a variable containing a text string text = &amp;#39;My phone number is 415-333-3922. His phone number is 4239389283&amp;#39; Apply regex # Find any text that fits the regex re.findall(r&amp;#39;\(?([2-9][0-8][0-9])\)?[-.●]?([2-9][0-9]{2})[-.●]?([0-9]{4})&amp;#39;, text) [(&#39;415&#39;, &#39;333&#39;, &#39;3922&#39;), (&#39;423&#39;, &#39;938&#39;, &#39;9283&#39;)]  </description>
    </item>
    
    <item>
      <title>Match US and UK Spellings</title>
      <link>https://chrisalbon.com/regex/match_us_uk_spellings/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/regex/match_us_uk_spellings/</guid>
      <description> Preliminaries # Load regex package import re Create some text # Create a variable containing a text string text = &amp;#39;It\s center and not centre.&amp;#39; Apply regex # Find any ISBN-10 or ISBN-13 number re.findall(r&amp;#39;\bcent(?:er|re)\b&amp;#39;, text) [&#39;center&#39;, &#39;centre&#39;]  </description>
    </item>
    
    <item>
      <title>Match Words With A Certain Ending</title>
      <link>https://chrisalbon.com/regex/match_words_with_certain_ending/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/regex/match_words_with_certain_ending/</guid>
      <description> Preliminaries # Load regex package import re Create some text # Create a variable containing a text string text = &amp;#39;Capitalism, Communism, Neorealism, Liberalism&amp;#39; Apply regex # Find any word ending in &amp;#39;ism&amp;#39; re.findall(r&amp;#39;\b\w*ism\b&amp;#39;, text) # Specific: # \b - start of the word # \w* - a word of any length # ism\b - with &amp;#39;ism&amp;#39;at the end [&#39;Capitalism&#39;, &#39;Communism&#39;, &#39;Neorealism&#39;, &#39;Liberalism&#39;]  </description>
    </item>
    
    <item>
      <title>Match ZIP Codes</title>
      <link>https://chrisalbon.com/regex/match_zip_codes/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/regex/match_zip_codes/</guid>
      <description> Preliminaries # Load regex package import re Create some text # Create a variable containing a text string text = &amp;#39;3829 South Ave Street, Pheonix, AZ 34923&amp;#39; Apply regex # Find any ISBN-10 or ISBN-13 number re.findall(r&amp;#39;[0-9]{5}(?:-[0-9]{4})?&amp;#39;, text) [&#39;34923&#39;]  </description>
    </item>
    
    <item>
      <title>Matching Conditions</title>
      <link>https://chrisalbon.com/scala/matching_conditions/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/scala/matching_conditions/</guid>
      <description> Create A String // Create some strings val text1 = &amp;#34;Man&amp;#34; val text2 = &amp;#34;F&amp;#34; val text3 = &amp;#34;Dog&amp;#34; Create A Function That Uses A Match Expression // Define a function that takes in a string, and matches it def findGender(word: String) = word match { // If any of these words, return &amp;#34;Woman&amp;#34;  case &amp;#34;Female&amp;#34; | &amp;#34;F&amp;#34; | &amp;#34;Woman&amp;#34; | &amp;#34;Lady&amp;#34; | &amp;#34;Girl&amp;#34; =&amp;gt; &amp;#34;Woman&amp;#34; // If any of these words, return &amp;#34;Man&amp;#34;  case &amp;#34;Male&amp;#34; | &amp;#34;M&amp;#34; | &amp;#34;Man&amp;#34; | &amp;#34;Gentleman&amp;#34; | &amp;#34;Boy&amp;#34; =&amp;gt; &amp;#34;Man&amp;#34; // If anything else, return &amp;#34;Unknown&amp;#34;  case _ =&amp;gt; &amp;#34;Unknown&amp;#34; } Apply The Function To The Strings findGender(text1) Man  findGender(text2) Woman  findGender(text3) Unknown  </description>
    </item>
    
    <item>
      <title>Mathematical Operations</title>
      <link>https://chrisalbon.com/python/math_operations/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/math_operations/</guid>
      <description>Import the math module import math Display the value of pi. math.pi 3.141592653589793  Display the value of e. math.e 2.718281828459045  Sine, cosine, and tangent math.sin(2 * math.pi / 180) 0.03489949670250097  Exponent 2 ** 4, pow(2, 4) (16, 16)  Absolute value abs(-20) 20  Summation sum((1, 2, 3, 4)) 10  Minimum min(3, 9, 10, 12) 3  Maximum max(3, 5, 10, 15) 15  Floor math.</description>
    </item>
    
    <item>
      <title>Mutable Maps</title>
      <link>https://chrisalbon.com/scala/mutable_maps/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/scala/mutable_maps/</guid>
      <description>Create A Mutable Map val army = collection.mutable.Map( &amp;#34;Tank&amp;#34; -&amp;gt; &amp;#34;A-1 Abrams&amp;#34;, &amp;#34;Aircraft&amp;#34; -&amp;gt; &amp;#34;F35&amp;#34;, &amp;#34;Ship&amp;#34; -&amp;gt; &amp;#34;Nimitz Class&amp;#34; ) Add An Element // Add an element army += (&amp;#34;APC&amp;#34; -&amp;gt; &amp;#34;Bradley IFC&amp;#34;) // Add an element (alternative) army.put(&amp;#34;Weapon&amp;#34;, &amp;#34;M60&amp;#34;) None  Add Multiple Elements // Add two elements army += (&amp;#34;Helicopter&amp;#34; -&amp;gt; &amp;#34;Apache&amp;#34;, &amp;#34;Missile&amp;#34; -&amp;gt; &amp;#34;Sidewinder&amp;#34;) Map(Weapon -&amp;gt; M60, APC -&amp;gt; Bradley IFC, Missile -&amp;gt; Sidewinder, Tank -&amp;gt; A-1 Abrams, Aircraft -&amp;gt; F35, Helicopter -&amp;gt; Apache, Ship -&amp;gt; Nimitz Class)  Remove An Element // Remove an element army -= &amp;#34;Ship&amp;#34; // Remove an element (alternative) army.</description>
    </item>
    
    <item>
      <title>N Dimension Arrays</title>
      <link>https://chrisalbon.com/scala/n_dimension_arrays/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/scala/n_dimension_arrays/</guid>
      <description> Create 2 x 2 Array // Set the number of rows and columns val rows = 2 val columns = 2 // Create an array of integers that is 2x2 val matrix = Array.ofDim[Int](rows, columns)// View array matrix Array(Array(0, 0), Array(0, 0))  Add Values To Array // First row, first column matrix(0)(0) = 1 // First row, second column matrix(0)(1) = 0 // Second row, first column matrix(1)(0) = 0 // Second row, second column matrix(1)(1) = 1// View array matrix Array(Array(1, 0), Array(0, 1))  </description>
    </item>
    
    <item>
      <title>Neural Network Early Stopping</title>
      <link>https://chrisalbon.com/deep_learning_keras/neural_network_early_stopping/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/deep_learning_keras/neural_network_early_stopping/</guid>
      <description>Preliminaries # Load libraries import numpy as np from keras.datasets import imdb from keras.preprocessing.text import Tokenizer from keras import models from keras import layers from keras.callbacks import EarlyStopping, ModelCheckpoint # Set random seed np.random.seed(0) Using TensorFlow backend.  Load Movie Review Text Data # Set the number of features we want number_of_features = 1000 # Load data and target vector from movie review data (train_data, train_target), (test_data, test_target) = imdb.</description>
    </item>
    
    <item>
      <title>Neural Network Weight Regularization</title>
      <link>https://chrisalbon.com/deep_learning_keras/neural_network_weight_regularization/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/deep_learning_keras/neural_network_weight_regularization/</guid>
      <description>Preliminaries # Load libraries import numpy as np from keras.datasets import imdb from keras.preprocessing.text import Tokenizer from keras import models from keras import layers from keras import regularizers # Set random seed np.random.seed(0) Using TensorFlow backend.  Load Movie Review Text Data # Set the number of features we want number_of_features = 1000 # Load data and target vector from movie review data (train_data, train_target), (test_data, test_target) = imdb.load_data(num_words=number_of_features) # Convert movie review data to a one-hot encoded feature matrix tokenizer = Tokenizer(num_words=number_of_features) train_features = tokenizer.</description>
    </item>
    
    <item>
      <title>Parallel Processing</title>
      <link>https://chrisalbon.com/python/parallel_processing/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/parallel_processing/</guid>
      <description>This tutorial is inspired by Chris Kiehl&amp;rsquo;s great post on multiprocessing.
Preliminaries from multiprocessing import Pool from multiprocessing.dummy import Pool as ThreadPool  Create Some Data # Create a list of some data data = range(29999) Create An Operation To Execute On The Data # Create a function that takes a data point def some_function(datum): # and returns the datum raised to the power of itself return datum**datum Traditional Approach %%time # Create an empty for the results results = [] # For each value in the data for datum in data: # Append the output of the function when applied to that datum results.</description>
    </item>
    
    <item>
      <title>Partial Function Applications</title>
      <link>https://chrisalbon.com/python/partial_function_applications/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/partial_function_applications/</guid>
      <description> Partial function application allows us to create &amp;ldquo;functions&amp;rdquo; from other functions with pre-filled arguments. This can be very useful when we want to pipe the output of one function into a function requiring two functions.
Preliminaries from functools import partial Create A Function def multiply(x, y): return x * y Create A Function With Y Pre-Filled double = partial(multiply, y=2) Run The Partial Function double(3) 6  </description>
    </item>
    
    <item>
      <title>Partial Functions</title>
      <link>https://chrisalbon.com/scala/partial_functions/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/scala/partial_functions/</guid>
      <description> isDefinedAt determines which inputs are accepted. apply is the actual operation.
Create A Partial Function // Create a new partial function that inputs a integer and outputs a string val dayOfTheWeek = new PartialFunction[Int, String] { // Create an array with the days of the week  val days = Array(&amp;#34;Monday&amp;#34;, &amp;#34;Tuesday&amp;#34;, &amp;#34;Wednesday&amp;#34;, &amp;#34;Thursday&amp;#34;, &amp;#34;Friday&amp;#34;, &amp;#34;Saturday&amp;#34;, &amp;#34;Sunday&amp;#34;) // Only accept input integers that are between 0 and 6  def isDefinedAt(i: Int) = i &amp;gt; 0 &amp;amp;&amp;amp; i &amp;lt; 6 // If accepted, return the correct day of the week string  def apply(i: Int) = days(i-1) } Run The Partial Function dayOfTheWeek(2) Tuesday  </description>
    </item>
    
    <item>
      <title>Preprocessing Data For Neural Networks</title>
      <link>https://chrisalbon.com/deep_learning_keras/preprocessing_data_for_neural_networks/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/deep_learning_keras/preprocessing_data_for_neural_networks/</guid>
      <description>Typically, a neural network&amp;rsquo;s parameters are initialized (i.e. created) as small random numbers. Neural networks often behave poorly when the feature values much larger than parameter values. Furthermore, since an observation&amp;rsquo;s feature values will are combined as they pass through individual units, it is important that all features have the same scale.
For these reasons, it is best practice (although not always necessary, for example when we have all binary features) to standardize each feature such that the feature&amp;rsquo;s values have the mean of 0 and the standard deviation of 1.</description>
    </item>
    
    <item>
      <title>Priority Queues</title>
      <link>https://chrisalbon.com/python/priority_queues/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/priority_queues/</guid>
      <description>Preliminaries import heapq Create A Priority Queue Object # Create a priority queue abstract base class class priority_queue: # Initialize the instance def __init__(self): # Create a list to use as the queue self._queue = [] # Create an index to use as ordering self._index = 0 # Create a function to add a task to the queue def add_task(self, item, priority): # Push the arguments to the _queue using a heap heapq.</description>
    </item>
    
    <item>
      <title>Queues And Stacks</title>
      <link>https://chrisalbon.com/python/queues_and_stacks/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/queues_and_stacks/</guid>
      <description>Preliminaries from collections import deque Make A Queue # Option 1: Make a queue queue = deque(range(10)) # Option 2: Make a queue that, if full, discards any item at the  # opposite end to where you added an item. queue = deque(range(10), maxlen=10) Manipulate Queue # Append an item to the right queue.append(&amp;#39;A&amp;#39;) # View queue queue deque([1, 2, 3, 4, 5, 6, 7, 8, 9, &#39;A&#39;])  # Append an item to the left queue.</description>
    </item>
    
    <item>
      <title>Random Integer Between Two Values</title>
      <link>https://chrisalbon.com/scala/random_integer_between_two_values/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/scala/random_integer_between_two_values/</guid>
      <description>Load Random // Create a value that is the random package val random = new scala.util.Random Create A Start And End // Create a start and end value pair val start = -10 val end = 10 Generate Random Integer Between The Start And End Values // Then generate a random integer between 0 and the different between end and start + 1 //(to make it inclusive), then shift the value into the desired range by added the start value start + random.</description>
    </item>
    
    <item>
      <title>Recursive Functions</title>
      <link>https://chrisalbon.com/python/recursive_functions/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/recursive_functions/</guid>
      <description> Simple factorial print(5*4*3*2*1) 120  Recursive function The tell-tale sign of a recursive function is a function that calls itself
# Create a function inputing n, that, def factorial(n): # if n is less than or equal to 1, if n &amp;lt;= 1: # return n, return n # if not, return n multiplied by the output # of the factorial function of one less than n return n*factorial(n-1) # run the function factorial(5) 120  </description>
    </item>
    
    <item>
      <title>Regular Expression Basics</title>
      <link>https://chrisalbon.com/python/regular_expressions_basics/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/regular_expressions_basics/</guid>
      <description>Import the regex (re) package import re Import sys import sys Create a simple text string. text = &amp;#39;The quick brown fox jumped over the lazy black bear.&amp;#39; Create a pattern to match three_letter_word = &amp;#39;\w{3}&amp;#39; Convert the string into a regex object pattern_re = re.compile(three_letter_word); pattern_re re.compile(r&#39;\w{3}&#39;, re.UNICODE)  Does a three letter word appear in text? re_search = re.search(&amp;#39;..own&amp;#39;, text) If the search query is at all true, if re_search: # Print the search results print(re_search.</description>
    </item>
    
    <item>
      <title>Regular Expression By Example</title>
      <link>https://chrisalbon.com/python/regex_by_example/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/regex_by_example/</guid>
      <description># Import regex import re# Create some data text = &amp;#39;A flock of 120 quick brown foxes jumped over 30 lazy brown, bears.&amp;#39; ^ Matches beginning of line. re.findall(&amp;#39;^A&amp;#39;, text) [&#39;A&#39;]  $ Matches end of line. re.findall(&amp;#39;bears.$&amp;#39;, text) [&#39;bears.&#39;]  . Matches any single character except newline. re.findall(&amp;#39;f..es&amp;#39;, text) [&#39;foxes&#39;]  [&amp;hellip;] Matches any single character in brackets. # Find all vowels re.findall(&amp;#39;[aeiou]&amp;#39;, text) [&#39;o&#39;, &#39;o&#39;, &#39;u&#39;, &#39;i&#39;, &#39;o&#39;, &#39;o&#39;, &#39;e&#39;, &#39;u&#39;, &#39;e&#39;, &#39;o&#39;, &#39;e&#39;, &#39;a&#39;, &#39;o&#39;, &#39;e&#39;, &#39;a&#39;]  [# ^&amp;hellip;] Matches any single character not in brackets # Find all characters that are not lower-case vowels re.</description>
    </item>
    
    <item>
      <title>Replacing Parts Of Strings</title>
      <link>https://chrisalbon.com/scala/replacing_parts_of_strings/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/scala/replacing_parts_of_strings/</guid>
      <description>Create A String // Create a string value val text: String = &amp;#34;Lt. Steve Miller will be leading the attack.&amp;#34; Create A Regex Pattern // Create a regex pattern for a name val find_steve = &amp;#34;Steve Miller&amp;#34;.r Replace Anything That Matches That Pattern With Something Else // Replace all instances of the pattern with a different name find_steve.replaceAllIn(text, &amp;#34;Peter Jackson&amp;#34;) Lt. Peter Jackson will be leading the attack.  Replace First Match // Replace first instance of the pattern with a different name find_steve.</description>
    </item>
    
    <item>
      <title>Run Project Jupyter Notebooks On Amazon EC2</title>
      <link>https://chrisalbon.com/cloud_computing/run_project_jupyter_on_amazon_ec2/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/cloud_computing/run_project_jupyter_on_amazon_ec2/</guid>
      <description>This is tutorial on running Project Jupyter Notebook on an Amazon EC2 instance. It is based on a tutorial by Piyush Agarwal which did not work for me immediately, but I tweaked a few things and got it working.
Note: This is not a beginner&amp;rsquo;s tutorial. I don&amp;rsquo;t explain some of the steps fully and don&amp;rsquo;t explain some concepts. There are other tutorials out there for that.
Create an AWS account An EC2 instance requires an AWS account.</description>
    </item>
    
    <item>
      <title>Save Model Training Progress</title>
      <link>https://chrisalbon.com/deep_learning_keras/save_model_training_progress/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/deep_learning_keras/save_model_training_progress/</guid>
      <description>Preliminaries # Load libraries import numpy as np from keras.datasets import imdb from keras.preprocessing.text import Tokenizer from keras import models from keras import layers from keras.callbacks import ModelCheckpoint # Set random seed np.random.seed(0) Load IMDB Movie Review Data # Set the number of features we want number_of_features = 1000 # Load data and target vector from movie review data (train_data, train_target), (test_data, test_target) = imdb.load_data(num_words=number_of_features) # Convert movie review data to a one-hot encoded feature matrix tokenizer = Tokenizer(num_words=number_of_features) train_features = tokenizer.</description>
    </item>
    
    <item>
      <title>Scheduling Jobs In The Future</title>
      <link>https://chrisalbon.com/python/schedule_run_in_the_future/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/schedule_run_in_the_future/</guid>
      <description># Import required modules import sched import time # setup the scheduler with our time settings s = sched.scheduler(time.time, time.sleep)# Create a function we want to run in the future. def print_time(): print(&amp;#34;Executive Order 66&amp;#34;)# Create a function for the delay def print_some_times(): # Create a scheduled job that will run # the function called &amp;#39;print_time&amp;#39; # after 10 seconds, and with priority 1. s.enter(10, 1, print_time) # Run the scheduler s.</description>
    </item>
    
    <item>
      <title>Search A Map</title>
      <link>https://chrisalbon.com/scala/search_a_map/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/scala/search_a_map/</guid>
      <description> Create A Map // Create an immutable map with three key value pairs val staff = Map(&amp;#34;CEO&amp;#34; -&amp;gt; &amp;#34;Judith Jackson&amp;#34;, &amp;#34;CFO&amp;#34; -&amp;gt; &amp;#34;Sally Shields&amp;#34;, &amp;#34;CTO&amp;#34; -&amp;gt; &amp;#34;Steven Miller&amp;#34;) Test If Key Exists // Test if key exists staff.contains(&amp;#34;CTO&amp;#34;) true  Test If Value Exists // Test is any value exists which contains part of a string staff.valuesIterator.exists(_.contains(&amp;#34;Miller&amp;#34;)) true  </description>
    </item>
    
    <item>
      <title>Search Strings Using Regex</title>
      <link>https://chrisalbon.com/scala/search_strings_with_regex/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/scala/search_strings_with_regex/</guid>
      <description>Create A String // Create a string value val attack_order : String = &amp;#34;Our 382 troops will attack their east flank at dawn. They have 28 troops there.&amp;#34; Create A Regex Pattern // Create a value that is a regex pattern val find_numbers = &amp;#34;[0-9]+&amp;#34;.r Find First Match // Apply the regex to find the first match, output the result, otherwise output &amp;#34;None&amp;#34; find_numbers.findFirstIn(attack_order).getOrElse(&amp;#34;None&amp;#34;) 382  Find All Matches // Apply the regex to find all matches and output to an array find_numbers.</description>
    </item>
    
    <item>
      <title>Select Random Element From A List</title>
      <link>https://chrisalbon.com/python/select_random_element_from_list/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/select_random_element_from_list/</guid>
      <description> Preliminaries from random import choice Create List # Make a list of crew members crew_members = [&amp;#39;Steve&amp;#39;, &amp;#39;Stacy&amp;#39;, &amp;#39;Miller&amp;#39;, &amp;#39;Chris&amp;#39;, &amp;#39;Bill&amp;#39;, &amp;#39;Jack&amp;#39;] Select Random Item From List # Choose a random crew member choice(crew_members) &#39;Stacy&#39;  </description>
    </item>
    
    <item>
      <title>Selection Sort</title>
      <link>https://chrisalbon.com/algorithms_data_structures/selection_sort/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/algorithms_data_structures/selection_sort/</guid>
      <description>This might not be the most efficient implementation of the selection sort algorithm. However, it is the one that closely matches how the algorithm is explained:
 Pick up the first card (if this was a deck of cards). Compare the card in your hand to each other card in turn If a smaller card is found, swap the cards (so the smaller card is now in your hand). When you get to the last card, put the card in your hand into a separate pile.</description>
    </item>
    
    <item>
      <title>Set Operations On Sequences</title>
      <link>https://chrisalbon.com/scala/set_operations_on_sequences/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/scala/set_operations_on_sequences/</guid>
      <description>Preliminaries import scala.collection.mutable.ArrayBuffer Create Two Array Sequences // Create two arrays of ages val student_ages = ArrayBuffer(42,25,28,38,58,63,23,458,2569,584,25,25) val teacher_ages = ArrayBuffer(23,25,25,38,58,32,23,23,125,23,23,21,26) Concatenate Two Sequences // Join two sequences end to end student_ages ++ teacher_ages ArrayBuffer(42, 25, 28, 38, 58, 63, 23, 458, 2569, 584, 25, 25, 23, 25, 25, 38, 58, 32, 23, 23, 125, 23, 23, 21, 26)  Intersection (Shared Elements) Of Two Sequences // Create the interaction of two sequences teacher_ages.</description>
    </item>
    
    <item>
      <title>Sorting Sequences</title>
      <link>https://chrisalbon.com/scala/sorting_sequences/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/scala/sorting_sequences/</guid>
      <description>Create Two Vectors // Create two vectors val ages = Vector(23,42,12,34) val lastName = Vector(&amp;#34;Jackson&amp;#34;, &amp;#34;Dillan&amp;#34;, &amp;#34;Bower&amp;#34;, &amp;#34;Stein&amp;#34;) Sort Alphabetically // View the sequence alphabetically lastName.sorted Vector(Bower, Dillan, Jackson, Stein)  Sort Ascending // View the sequence in ascending order ages.sorted Vector(12, 23, 34, 42)  Sort Descending // View the sequence sorted using i &amp;gt; j ages.sortWith(_ &amp;gt; _) Vector(42, 34, 23, 12)  Sort By Length // Voew the sequence sorted by descending length lastName.</description>
    </item>
    
    <item>
      <title>Split Strings</title>
      <link>https://chrisalbon.com/scala/split_strings/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/scala/split_strings/</guid>
      <description>Split Up A String By Spaces // Create a value called text that is a string val text: String = &amp;#34;This is a sentence that we want to split along every space&amp;#34; // Split up the value along every space text.split(&amp;#34; &amp;#34;) Array(This, is, a, sentence, that, we, want, to, split, along, every, space)  Split Up A String By Commas // Create a value called csv_row that is a string and contains one row of data val csv_row: String = &amp;#34;Billy, Miller, 22, Baker, High School&amp;#34; // Split up that row by commas csv_row.</description>
    </item>
    
    <item>
      <title>Test article</title>
      <link>https://chrisalbon.com/articles/test_test_test/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/articles/test_test_test/</guid>
      <description>Bessel&amp;rsquo;s correction is the reason we use $n-1$ instead of $n$ in the calculations of sample variance and sample standard deviation.
Sample variance:
$$ s^2 = \frac {1}{n-1} \sum_{i=1}^n \left(x_i - \overline{x} \right)^ 2 $$
When we calculate sample variance, we are attempting to estimate the population variance, an unknown value. To make this estimate, we estimate this unknown population variance from the mean of the squared deviations of samples from the overall sample mean.</description>
    </item>
    
    <item>
      <title>Try, Catch, Finally</title>
      <link>https://chrisalbon.com/scala/try_catch_finally/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/scala/try_catch_finally/</guid>
      <description>Create Some Operation That Will Cause An Exception &amp;#34;Sixteen&amp;#34;.toFloat Name: java.lang.NumberFormatException Message: For input string: &amp;quot;Sixteen&amp;quot; StackTrace: at sun.misc.FloatingDecimal.readJavaFormatString(FloatingDecimal.java:2043) at sun.misc.FloatingDecimal.parseFloat(FloatingDecimal.java:122) at java.lang.Float.parseFloat(Float.java:451) at scala.collection.immutable.StringLike$class.toFloat(StringLike.scala:280) at scala.collection.immutable.StringOps.toFloat(StringOps.scala:29)  Try, Catch, Finally // Try try { // The bad operation  &amp;#34;Sixteen&amp;#34;.toFloat // Catch any problems } catch { // If it is an exception, print something  case e: Exception =&amp;gt; println(&amp;#34;Something went wrong&amp;#34;) } finally { // Regardless of if there is an error or not, print this  println(&amp;#34;We are finally done.</description>
    </item>
    
    <item>
      <title>Try, Except, and Finally</title>
      <link>https://chrisalbon.com/python/try_except_finally/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/try_except_finally/</guid>
      <description>Create data # Create some data scores = [23,453,54,235,74,234] Try something that doesn&amp;rsquo;t work # Try to: try: # Add a list of integers and a string scores + &amp;#39;A string of characters.&amp;#39; # If you get an error, set the error as &amp;#39;e&amp;#39;, except Exception as e: # print the error, e print(&amp;#39;Error:&amp;#39;, e) # Then, finally: # print end program print(&amp;#39;End Program&amp;#39;) Error: can only concatenate list (not &amp;quot;str&amp;quot;) to list End Program  Try something that works # Try to: try: # Print scores print(&amp;#39;Worked!</description>
    </item>
    
    <item>
      <title>Tuning Neural Network Hyperparameters</title>
      <link>https://chrisalbon.com/deep_learning_keras/tuning_neural_network_hyperparameters/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/deep_learning_keras/tuning_neural_network_hyperparameters/</guid>
      <description>Preliminaries # Load libraries import numpy as np from keras import models from keras import layers from keras.wrappers.scikit_learn import KerasClassifier from sklearn.model_selection import GridSearchCV from sklearn.datasets import make_classification # Set random seed np.random.seed(0) Using TensorFlow backend.  Generate Target And Feature Data # Number of features number_of_features = 100 # Generate features matrix and target vector features, target = make_classification(n_samples = 10000, n_features = number_of_features, n_informative = 3, n_redundant = 0, n_classes = 2, weights = [.</description>
    </item>
    
    <item>
      <title>Unpacking A Tuple</title>
      <link>https://chrisalbon.com/python/unpacking_a_tuple/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/unpacking_a_tuple/</guid>
      <description> Create List Of Tuples # Create a list of tuples where the first and second element of each  # super is the first last names, respectively soldiers = [(&amp;#39;Steve&amp;#39;, &amp;#39;Miller&amp;#39;), (&amp;#39;Stacy&amp;#39;, &amp;#39;Markov&amp;#39;), (&amp;#39;Sonya&amp;#39;, &amp;#39;Matthews&amp;#39;), (&amp;#39;Sally&amp;#39;, &amp;#39;Mako&amp;#39;)] Unpack Tuples # For the second element for each tuple in soldiers, for _, last_name in soldiers: # print the second element print(last_name) Miller Markov Matthews Mako  </description>
    </item>
    
    <item>
      <title>Unpacking Function Arguments</title>
      <link>https://chrisalbon.com/python/unpacking_function_arguments/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/unpacking_function_arguments/</guid>
      <description> Create Argument Objects # Create a dictionary of arguments argument_dict = {&amp;#39;a&amp;#39;:&amp;#39;Alpha&amp;#39;, &amp;#39;b&amp;#39;:&amp;#39;Bravo&amp;#39;} # Create a list of arguments argument_list = [&amp;#39;Alpha&amp;#39;, &amp;#39;Bravo&amp;#39;] Create A Simple Function # Create a function that takes two inputs def simple_function(a, b): # and prints them combined return a + b Run the Function With Unpacked Arguments # Run the function with the unpacked argument dictionary simple_function(**argument_dict) &#39;AlphaBravo&#39;  # Run the function with the unpacked argument list simple_function(*argument_list) &#39;AlphaBravo&#39;  </description>
    </item>
    
    <item>
      <title>Using Named Tuples To Store Data</title>
      <link>https://chrisalbon.com/python/using_named_tuples_to_store_data/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/using_named_tuples_to_store_data/</guid>
      <description> Preliminaries from collections import namedtuple Create A Named Tuple Vehicle = namedtuple(&amp;#39;Vehicle&amp;#39;, &amp;#39;make model wheels manual&amp;#39;) Create An Entry forrester = Vehicle(&amp;#39;Forrester&amp;#39;, &amp;#39;Subaru&amp;#39;, 4, True) View The Data In Entry forrester.model &#39;Subaru&#39;  forrester.wheels 4  </description>
    </item>
    
    <item>
      <title>Variables And Values</title>
      <link>https://chrisalbon.com/scala/variables_and_values/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/scala/variables_and_values/</guid>
      <description> Values Are Immutable // Create a value called greeting that is a string with the word &amp;#34;Hello&amp;#34; val greeting: String = &amp;#34;Hello&amp;#34; // View the value greeting Hello  Variables Are Mutable // Create a variable called age that is a &amp;#34;short&amp;#34; number (between -32768 to 32767) with the number 12 var age: Short = 12 // View the variable age 12  </description>
    </item>
    
    <item>
      <title>Visualize Loss History</title>
      <link>https://chrisalbon.com/deep_learning_keras/visualize_loss_history/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/deep_learning_keras/visualize_loss_history/</guid>
      <description>Preliminaries # Load libraries import numpy as np from keras.datasets import imdb from keras.preprocessing.text import Tokenizer from keras import models from keras import layers import matplotlib.pyplot as plt # Set random seed np.random.seed(0) Using TensorFlow backend.  Load Movie Review Data # Set the number of features we want number_of_features = 10000 # Load data and target vector from movie review data (train_data, train_target), (test_data, test_target) = imdb.load_data(num_words=number_of_features) # Convert movie review data to a one-hot encoded feature matrix tokenizer = Tokenizer(num_words=number_of_features) train_features = tokenizer.</description>
    </item>
    
    <item>
      <title>Visualize Neural Network Architecutre</title>
      <link>https://chrisalbon.com/deep_learning_keras/visualize_neural_network_architecture/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/deep_learning_keras/visualize_neural_network_architecture/</guid>
      <description>Preliminaries # Load libraries from keras import models from keras import layers from IPython.display import SVG from keras.utils.vis_utils import model_to_dot from keras.utils import plot_model Using TensorFlow backend.  Construct Neural Network Architecture # Start neural network network = models.Sequential() # Add fully connected layer with a ReLU activation function network.add(layers.Dense(units=16, activation=&amp;#39;relu&amp;#39;, input_shape=(10,))) # Add fully connected layer with a ReLU activation function network.add(layers.Dense(units=16, activation=&amp;#39;relu&amp;#39;)) # Add fully connected layer with a sigmoid activation function network.</description>
    </item>
    
    <item>
      <title>Visualize Performance History</title>
      <link>https://chrisalbon.com/deep_learning_keras/visualize_performance_history/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/deep_learning_keras/visualize_performance_history/</guid>
      <description>Preliminaries # Load libraries import numpy as np from keras.datasets import imdb from keras.preprocessing.text import Tokenizer from keras import models from keras import layers import matplotlib.pyplot as plt # Set random seed np.random.seed(0) Using TensorFlow backend.  Load Movie Review Data # Set the number of features we want number_of_features = 10000 # Load data and target vector from movie review data (train_data, train_target), (test_data, test_target) = imdb.load_data(num_words=number_of_features) # Convert movie review data to a one-hot encoded feature matrix tokenizer = Tokenizer(num_words=number_of_features) train_features = tokenizer.</description>
    </item>
    
    <item>
      <title>Zip Together Two Lists</title>
      <link>https://chrisalbon.com/scala/zip_together_two_lists/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/scala/zip_together_two_lists/</guid>
      <description> Create Two Vectors // Create two vectors val firstName = Vector(&amp;#34;Steve&amp;#34;, &amp;#34;Bob&amp;#34;, &amp;#34;Jack&amp;#34;, &amp;#34;Jill&amp;#34;) val lastName = Vector(&amp;#34;Jackson&amp;#34;, &amp;#34;Dillan&amp;#34;, &amp;#34;Bower&amp;#34;, &amp;#34;Stein&amp;#34;) Zip Together Vectors // Create a new variable that zips the sequences val fullNames = firstName zip lastName// View the zipped sequences and convert to a map fullNames Vector((Steve,Jackson), (Bob,Dillan), (Jack,Bower), (Jill,Stein))  </description>
    </item>
    
    <item>
      <title>any(), all(), max(), min(), sum()</title>
      <link>https://chrisalbon.com/python/any_all_max_min_sum/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/any_all_max_min_sum/</guid>
      <description> Create Data data = [34, 54, 50, 20, 20] any() # Return true if any element is True any(data) True  all() # Return true if all elements are True all(data) True  max() # Return max value max(data) 54  min() # Return the min value min(data) 20  sum() # Return the total value sum(data) 178  </description>
    </item>
    
    <item>
      <title>argmin and argmax</title>
      <link>https://chrisalbon.com/mathematics/argmin_and_argmax/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/mathematics/argmin_and_argmax/</guid>
      <description>argmin and argmax are the inputs, x&amp;rsquo;s, to a function, f, that creates the smallest and largest outputs, f(x).
Preliminaries import numpy as np import pandas as pd np.random.seed(1) Define A Function, f(x) # Define a function that, def f(x): # Outputs x multiplied by a random number drawn from a normal distribution return x * np.random.normal(size=1)[0] Create Some Values Of x # Create some values of x xs = [1,2,3,4,5,6] Find The Argmin Of f(x) #Define argmin that def argmin(f, xs): # Applies f on all the x&amp;#39;s data = [f(x) for x in xs] # Finds index of the smallest output of f(x) index_of_min = data.</description>
    </item>
    
    <item>
      <title>if and if else</title>
      <link>https://chrisalbon.com/python/if_and_if_else_statements/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/if_and_if_else_statements/</guid>
      <description>Create a variable with the status of the conflict.  1 if the conflict is active 0 if the conflict is not active unknown if the status of the conflict is unknwon  conflict_active = 1 If the conflict is active print a statement if conflict_active == 1: print(&amp;#39;The conflict is active.&amp;#39;) The conflict is active.  If the conflict is active print a statement, if not, print a different statement if conflict_active == 1: print(&amp;#39;The conflict is active.</description>
    </item>
    
    <item>
      <title>k-Fold Cross-Validating Neural Networks</title>
      <link>https://chrisalbon.com/deep_learning_keras/k-fold_cross-validating_neural_networks/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/deep_learning_keras/k-fold_cross-validating_neural_networks/</guid>
      <description>If we have smaller data it can be useful to benefit from k-fold cross-validation to maximize our ability to evaluate the neural network&amp;rsquo;s performance. This is possible in Keras because we can &amp;ldquo;wrap&amp;rdquo; any neural network such that it can use the evaluation features available in scikit-learn, including k-fold cross-validation. To accomplish this, we first have to create a function that returns a compiled neural network. Next we use KerasClassifier (if we have a classifier, if we have a regressor we can use KerasRegressor) to wrap the model so it can be used by scikit-learn.</description>
    </item>
    
    <item>
      <title>repr vs. str</title>
      <link>https://chrisalbon.com/python/repr_vs_str/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/repr_vs_str/</guid>
      <description>Preliminaries import datetime Create A Simple Object class Regiment(object): def __init__(self, date=datetime.datetime.now()): self.date = date def __repr__(self): return date def __str__(self): return str(date) __repr__ is for the developer. It is string representation of the object and the code needed to reproduce the object.
__str__ is the output for the end user. It prints what the user wants to see.</description>
    </item>
    
    <item>
      <title>while Statement</title>
      <link>https://chrisalbon.com/python/while_statements/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/while_statements/</guid>
      <description>Import the random module import random Create a variable of the true number of deaths of an event deaths = 6 Create a variable that is denotes if the while loop should keep running running = True while running is True while running: # Create a variable that randomly create a integer between 0 and 10. guess = random.randint(0,10) # if guess equals deaths, if guess == deaths: # then print this print(&amp;#39;Correct!</description>
    </item>
    
  </channel>
</rss>