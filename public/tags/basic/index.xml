<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Basic on Chris Albon</title>
    <link>https://chrisalbon.com/tags/basic/</link>
    <description>Recent content in Basic on Chris Albon</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Dec 2017 11:53:49 -0700</lastBuildDate>
    
	<atom:link href="https://chrisalbon.com/tags/basic/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Basic Operations With NumPy Array</title>
      <link>https://chrisalbon.com/python/numpy_array_basic_operations/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/numpy_array_basic_operations/</guid>
      <description># Import modules import numpy as np# Create an array civilian_deaths = np.array([4352, 233, 3245, 256, 2394]) civilian_deaths array([4352, 233, 3245, 256, 2394])  # Mean value of the array civilian_deaths.mean() 2096.0  # Total amount of deaths civilian_deaths.sum() 10480  # Smallest value in the array civilian_deaths.min() 233  # Largest value in the array civilian_deaths.max() 4352  </description>
    </item>
    
    <item>
      <title>Converting Strings To Datetime</title>
      <link>https://chrisalbon.com/python/strings_to_datetime/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/strings_to_datetime/</guid>
      <description>Import modules from datetime import datetime from dateutil.parser import parse import pandas as pd Create a string variable with the war start time war_start = &amp;#39;2011-01-03&amp;#39; Convert the string to datetime format datetime.strptime(war_start, &amp;#39;%Y-%m-%d&amp;#39;) datetime.datetime(2011, 1, 3, 0, 0)  Create a list of strings as dates attack_dates = [&amp;#39;7/2/2011&amp;#39;, &amp;#39;8/6/2012&amp;#39;, &amp;#39;11/13/2013&amp;#39;, &amp;#39;5/26/2011&amp;#39;, &amp;#39;5/2/2001&amp;#39;] Convert attack_dates strings into datetime format [datetime.strptime(x, &amp;#39;%m/%d/%Y&amp;#39;) for x in attack_dates] [datetime.datetime(2011, 7, 2, 0, 0), datetime.</description>
    </item>
    
    <item>
      <title>Indexing And Slicing NumPy Arrays</title>
      <link>https://chrisalbon.com/python/numpy_indexing_and_slicing/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/numpy_indexing_and_slicing/</guid>
      <description># Import modules import numpy as np# Create a 2x2 array battle_deaths = [[344, 2345], [253, 4345]] deaths = np.array(battle_deaths) deaths array([[ 344, 2345], [ 253, 4345]])  # Select the top row, second item deaths[0, 1] 2345  # Select the second column deaths[:, 1] array([2345, 4345])  # Select the second row deaths[1, :] array([ 253, 4345])  # Create an array of civilian deaths civilian_deaths = np.array([4352, 233, 3245, 256, 2394]) civilian_deaths array([4352, 233, 3245, 256, 2394])  # Find the index of battles with less than 500 deaths few_civ_deaths = np.</description>
    </item>
    
    <item>
      <title>Nested For Loops Using List Comprehension</title>
      <link>https://chrisalbon.com/python/nested_for_loops_using_list_comprehension/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/nested_for_loops_using_list_comprehension/</guid>
      <description># Create two lists squads = [&amp;#34;1st Squad&amp;#34;, &amp;#39;2nd Squad&amp;#39;, &amp;#39;3rd Squad&amp;#39;] regiments = [&amp;#34;51st Regiment&amp;#34;, &amp;#39;15th Regiment&amp;#39;, &amp;#39;12th Regiment&amp;#39;]# Create a tuple for each regiment in regiments, for each squad in sqauds [(regiment, squad) for regiment in regiments for squad in squads ] [(&#39;51st Regiment&#39;, &#39;1st Squad&#39;), (&#39;51st Regiment&#39;, &#39;2nd Squad&#39;), (&#39;51st Regiment&#39;, &#39;3rd Squad&#39;), (&#39;15th Regiment&#39;, &#39;1st Squad&#39;), (&#39;15th Regiment&#39;, &#39;2nd Squad&#39;), (&#39;15th Regiment&#39;, &#39;3rd Squad&#39;), (&#39;12th Regiment&#39;, &#39;1st Squad&#39;), (&#39;12th Regiment&#39;, &#39;2nd Squad&#39;), (&#39;12th Regiment&#39;, &#39;3rd Squad&#39;)]  </description>
    </item>
    
    <item>
      <title>Nesting Lists</title>
      <link>https://chrisalbon.com/python/nesting_lists/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/nesting_lists/</guid>
      <description># Create a list of three nested lists, each with three items state_regions = [[&amp;#39;California&amp;#39;, &amp;#39;Oregon&amp;#39;, &amp;#39;Washington&amp;#39;], [&amp;#39;Texas&amp;#39;,&amp;#39;Georgia&amp;#39;,&amp;#39;Alabama&amp;#39;], [&amp;#39;Maine&amp;#39;,&amp;#39;Vermont&amp;#39;,&amp;#39;New York&amp;#39;]]# View the list state_regions [[&#39;California&#39;, &#39;Oregon&#39;, &#39;Washington&#39;], [&#39;Texas&#39;, &#39;Georgia&#39;, &#39;Alabama&#39;], [&#39;Maine&#39;, &#39;Vermont&#39;, &#39;New York&#39;]]  # Print the second list&amp;#39;s third item state_regions[1][2] &#39;Alabama&#39;  </description>
    </item>
    
    <item>
      <title>Numpy Array Basics</title>
      <link>https://chrisalbon.com/python/numpy_array_basics/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/numpy_array_basics/</guid>
      <description># Import modules import numpy as np# Create a list battle_deaths = [3246, 326, 2754, 2547, 2457, 3456] battle_deaths [3246, 326, 2754, 2547, 2457, 3456]  # Create an array from numpy deaths = np.array(battle_deaths) deaths array([3246, 326, 2754, 2547, 2457, 3456])  # Create an array of zeros defectors = np.zeros(6) defectors array([ 0., 0., 0., 0., 0., 0.])  # Create a range from 0 to 100 zero_to_99 = np.</description>
    </item>
    
    <item>
      <title>Store API Credentials For Open Source Projects</title>
      <link>https://chrisalbon.com/python/store_api_credentials_for_open_source_projects/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/store_api_credentials_for_open_source_projects/</guid>
      <description>One issue which repeated comes up is how to manage private API credentials when the project is available on GitHub. This is the method I use for my own projects. I store all credentials in a JSON file and tell gitignore to not upload that file. Then when I am running that code locally, load the API credentials from the JSON file.
Preliminaries import json Step 1: Create a JSON with the API credentials credentials = {&amp;#39;access_secret&amp;#39;: &amp;#39;392n39d93&amp;#39;, &amp;#39;access_token&amp;#39;: &amp;#39;sdf424f&amp;#39;, &amp;#39;consumer_key&amp;#39;: &amp;#39;sdf3223&amp;#39;, &amp;#39;consumer_secret&amp;#39;: &amp;#39;dsf2344&amp;#39;}with open(&amp;#39;credentials.</description>
    </item>
    
    <item>
      <title>Streaming Data Pipeline</title>
      <link>https://chrisalbon.com/python/streaming_data_pipeline/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/streaming_data_pipeline/</guid>
      <description> Create Some Raw Data raw_data = [1,2,3,4,5,6,7,8,9,10] Create Data Processing Functions # Define a generator that yields input+6 def add_6(numbers): for x in numbers: output = x+6 yield output # Define a generator that yields input-2 def subtract_2(numbers): for x in numbers: output = x-2 yield output # Define a generator that yields input*100  def multiply_by_100(numbers): for x in numbers: output = x*100 yield output Create Data Pipeline # Step 1 of the pipeline step1 = add_6(raw_data) # Step 2 of the pipeline step2 = subtract_2(step1) # Step 3 of the pipeline pipeline = multiply_by_100(step2) Send First Two Pieces Of Raw Data Through Pipeline # First element of the raw data next(pipeline) 500  # Second element of the raw data next(pipeline) 600  Send All Raw Data Through Pipeline # Process all data for raw_data in pipeline: print(raw_data) 700 800 900 1000 1100 1200 1300 1400  </description>
    </item>
    
    <item>
      <title>String Formatting</title>
      <link>https://chrisalbon.com/python/string_formatting/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/string_formatting/</guid>
      <description> Import the sys module import sys Print a string with 1 digit and one string. &amp;#39;This is %d%sbird!&amp;#39; % (1, &amp;#39;dead&amp;#39;) &#39;This is 1 dead bird!&#39;  Print a dictionary based string &amp;#39;%(number)dmore %(food)s&amp;#39; % {&amp;#39;number&amp;#39; : 1, &amp;#39;food&amp;#39; : &amp;#39;burger&amp;#39;} &#39;1 more burger&#39;  Print a string about my laptop. &amp;#39;My {1[kind]} runs {0.platform}&amp;#39;.format(sys, {&amp;#39;kind&amp;#39;: &amp;#39;laptop&amp;#39;}) &#39;My laptop runs darwin&#39;  String Formatting Codes  %s string %r repr string %c character (integer or string) %d decimal %i integer %x hex integer %X same as X but with uppercase %e floating point lowercase %E floating point uppercase %f floating point decimal lowercase %F floating point decimal uppercase %g floating point e or f %G floating point E or F %% literal %  </description>
    </item>
    
    <item>
      <title>String Indexing</title>
      <link>https://chrisalbon.com/python/string_indexing/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/string_indexing/</guid>
      <description>Create a string string = &amp;#39;Strings are defined as ordered collections of characters.&amp;#39; Print the entire string string[:] &#39;Strings are defined as ordered collections of characters.&#39;  Print the first three characters string[0:3] &#39;Str&#39;  Print the first three characters string[:3] &#39;Str&#39;  Print the last three characters string[-3:] &#39;rs.&#39;  Print the third to fifth character string[2:5] &#39;rin&#39;  Print the first to the tenth character, skipping every other character string[0:10:2] &#39;Srnsa&#39;  Print the string in reverse string[::-1] &#39;.</description>
    </item>
    
    <item>
      <title>String Operations</title>
      <link>https://chrisalbon.com/python/string_operations/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/string_operations/</guid>
      <description>Python 3 has three string types
 str() is for unicode bytes() is for binary data bytesarray() mutable variable of bytes  Create some simulated text. string = &amp;#39;The quick brown fox jumped over the lazy brown bear.&amp;#39; Capitalize the first letter. string_capitalized = string.capitalize() string_capitalized &#39;The quick brown fox jumped over the lazy brown bear.&#39;  Center the string with periods on either side, for a total of 79 characters string_centered = string.</description>
    </item>
    
    <item>
      <title>Swapping Variable Values</title>
      <link>https://chrisalbon.com/python/swapping_variable_values/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>https://chrisalbon.com/python/swapping_variable_values/</guid>
      <description> Setup the originally variables and their values one = 1 two = 2 View the original variables &amp;#39;one =&amp;#39;, one, &amp;#39;two =&amp;#39;, two (&#39;one =&#39;, 1, &#39;two =&#39;, 2)  Swap the values one, two = two, one View the swapped values, notice how the values for each variable have changed &amp;#39;one =&amp;#39;, one, &amp;#39;two =&amp;#39;, two (&#39;one =&#39;, 2, &#39;two =&#39;, 1)  </description>
    </item>
    
  </channel>
</rss>